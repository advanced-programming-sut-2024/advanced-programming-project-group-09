Index: src/main/java/Sample/Model/GameBattleField.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Sample.Model;\r\n\r\nimport Sample.CardEnums.SpecialCard;\r\nimport com.google.gson.Gson;\r\n\r\nimport java.io.FileWriter;\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\n\r\npublic class GameBattleField {\r\n    private final User user1;\r\n    private final User user2;\r\n    private final ArrayList<SpecialCard> weatherCards = new ArrayList<>();\r\n\r\n    public GameBattleField(User user1, User user2) {\r\n        this.user1 = user1;\r\n        this.user2 = user2;\r\n    }\r\n\r\n    public void saveGameState(String filePath) {\r\n        Gson gson = new Gson();\r\n        try (FileWriter writer = new FileWriter(filePath)) {\r\n            gson.toJson(this, writer);\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public static GameBattleField loadGameState(String filePath) {\r\n        Gson gson = new Gson();\r\n        try (FileReader reader = new FileReader(filePath)) {\r\n            return gson.fromJson(reader, GameBattleField.class);\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n            return null;\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Sample/Model/GameBattleField.java b/src/main/java/Sample/Model/GameBattleField.java
--- a/src/main/java/Sample/Model/GameBattleField.java	(revision f9bb180293b1f8ec200f5452f43070a0516a10ba)
+++ b/src/main/java/Sample/Model/GameBattleField.java	(date 1719693133217)
@@ -1,5 +1,6 @@
 package Sample.Model;
 
+import Sample.CardEnums.CommonCard;
 import Sample.CardEnums.SpecialCard;
 import com.google.gson.Gson;
 
@@ -10,12 +11,165 @@
 
 public class GameBattleField {
     private final User user1;
+    private final ArrayList<CommonCard> commonCardInBattleFieldUser1 = new ArrayList<>();
+    private final ArrayList<SpecialCard> specialCardsBattleFieldUser1 = new ArrayList<>();
+    private final ArrayList<CommonCard> closeCombatBattleFieldUser1 = new ArrayList<>();
+    private final ArrayList<CommonCard> commonCardsInDiscardUser1 = new ArrayList<>();
+    private final ArrayList<SpecialCard> specialCardsDiscardUser1 = new ArrayList<>();
+    private final ArrayList<CommonCard> siegeIsPlayedUser1 = new ArrayList<>();
+    private final ArrayList<CommonCard> rangedIsPlayedUser1 = new ArrayList<>();
+    private SpecialCard specialFieldInCloseCombatUser1 = null;
+    private SpecialCard specialFieldInSiegeUser1 = null;
+    private SpecialCard specialFieldInRangedUser1 = null;
+
     private final User user2;
+    private final ArrayList<CommonCard> commonCardInBattleFieldUser2 = new ArrayList<>();
+    private final ArrayList<SpecialCard> specialCardsBattleFieldUser2 = new ArrayList<>();
+    private final ArrayList<CommonCard> closeCombatBattleFieldUser2 = new ArrayList<>();
+    private final ArrayList<CommonCard> commonCardsInDiscardUser2 = new ArrayList<>();
+    private final ArrayList<SpecialCard> specialCardsDiscardUser2 = new ArrayList<>();
+    private final ArrayList<CommonCard> siegeIsPlayedUser2 = new ArrayList<>();
+    private final ArrayList<CommonCard> rangedIsPlayedUser2 = new ArrayList<>();
+    private SpecialCard specialFieldInCloseCombatUser2 = null;
+    private SpecialCard specialFieldInSiegeUser2 = null;
+    private SpecialCard specialFieldInRangedUser2 = null;
+
+    private User whichUserTurn;
     private final ArrayList<SpecialCard> weatherCards = new ArrayList<>();
 
     public GameBattleField(User user1, User user2) {
         this.user1 = user1;
         this.user2 = user2;
+        whichUserTurn = user1;
+    }
+
+    public User getUser1() {
+        return user1;
+    }
+
+    public ArrayList<CommonCard> getCommonCardInBattleFieldUser1() {
+        return commonCardInBattleFieldUser1;
+    }
+
+    public ArrayList<SpecialCard> getSpecialCardsBattleFieldUser1() {
+        return specialCardsBattleFieldUser1;
+    }
+
+    public ArrayList<CommonCard> getCloseCombatBattleFieldUser1() {
+        return closeCombatBattleFieldUser1;
+    }
+
+    public ArrayList<CommonCard> getCommonCardsInDiscardUser1() {
+        return commonCardsInDiscardUser1;
+    }
+
+    public ArrayList<SpecialCard> getSpecialCardsDiscardUser1() {
+        return specialCardsDiscardUser1;
+    }
+
+    public ArrayList<CommonCard> getSiegeIsPlayedUser1() {
+        return siegeIsPlayedUser1;
+    }
+
+    public ArrayList<CommonCard> getRangedIsPlayedUser1() {
+        return rangedIsPlayedUser1;
+    }
+
+    public SpecialCard getSpecialFieldInCloseCombatUser1() {
+        return specialFieldInCloseCombatUser1;
+    }
+
+    public void setSpecialFieldInCloseCombatUser1(SpecialCard specialFieldInCloseCombatUser1) {
+        this.specialFieldInCloseCombatUser1 = specialFieldInCloseCombatUser1;
+    }
+
+    public SpecialCard getSpecialFieldInSiegeUser1() {
+        return specialFieldInSiegeUser1;
+    }
+
+    public void setSpecialFieldInSiegeUser1(SpecialCard specialFieldInSiegeUser1) {
+        this.specialFieldInSiegeUser1 = specialFieldInSiegeUser1;
+    }
+
+    public SpecialCard getSpecialFieldInRangedUser1() {
+        return specialFieldInRangedUser1;
+    }
+
+    public void setSpecialFieldInRangedUser1(SpecialCard specialFieldInRangedUser1) {
+        this.specialFieldInRangedUser1 = specialFieldInRangedUser1;
+    }
+
+    public User getUser2() {
+        return user2;
+    }
+
+    public ArrayList<CommonCard> getCommonCardInBattleFieldUser2() {
+        return commonCardInBattleFieldUser2;
+    }
+
+    public ArrayList<SpecialCard> getSpecialCardsBattleFieldUser2() {
+        return specialCardsBattleFieldUser2;
+    }
+
+    public ArrayList<CommonCard> getCloseCombatBattleFieldUser2() {
+        return closeCombatBattleFieldUser2;
+    }
+
+    public ArrayList<CommonCard> getCommonCardsInDiscardUser2() {
+        return commonCardsInDiscardUser2;
+    }
+
+    public ArrayList<SpecialCard> getSpecialCardsDiscardUser2() {
+        return specialCardsDiscardUser2;
+    }
+
+    public ArrayList<CommonCard> getSiegeIsPlayedUser2() {
+        return siegeIsPlayedUser2;
+    }
+
+    public ArrayList<CommonCard> getRangedIsPlayedUser2() {
+        return rangedIsPlayedUser2;
+    }
+
+    public SpecialCard getSpecialFieldInCloseCombatUser2() {
+        return specialFieldInCloseCombatUser2;
+    }
+
+    public void setSpecialFieldInCloseCombatUser2(SpecialCard specialFieldInCloseCombatUser2) {
+        this.specialFieldInCloseCombatUser2 = specialFieldInCloseCombatUser2;
+    }
+
+    public SpecialCard getSpecialFieldInSiegeUser2() {
+        return specialFieldInSiegeUser2;
+    }
+
+    public void setSpecialFieldInSiegeUser2(SpecialCard specialFieldInSiegeUser2) {
+        this.specialFieldInSiegeUser2 = specialFieldInSiegeUser2;
+    }
+
+    public SpecialCard getSpecialFieldInRangedUser2() {
+        return specialFieldInRangedUser2;
+    }
+
+    public void setSpecialFieldInRangedUser2(SpecialCard specialFieldInRangedUser2) {
+        this.specialFieldInRangedUser2 = specialFieldInRangedUser2;
+    }
+
+    public User getWhichUserTurn() {
+        return whichUserTurn;
+    }
+
+    public void setWhichUserTurn(User whichUserTurn) {
+        this.whichUserTurn = whichUserTurn;
+    }
+
+    public ArrayList<SpecialCard> getWeatherCards() {
+        return weatherCards;
+    }
+
+    public void ChangeTurn() {
+        if (whichUserTurn.equals(user1)) whichUserTurn = user2;
+        else whichUserTurn = user1;
     }
 
     public void saveGameState(String filePath) {
Index: src/main/resources/Sample/View/CSS/style.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>TextField {\r\n    -fx-border-color: transparent transparent lightgray transparent;\r\n    -fx-border-width: 0 0 1 0;\r\n    -fx-background-color: transparent;\r\n    -fx-prompt-text-fill: rgb(61, 206, 21);\r\n    -fx-text-fill: gold;\r\n    -fx-background-radius: 15 15 0 0;\r\n    -fx-alignment: center;\r\n    -fx-font-family: \"Comic Sans MS\";\r\n    -fx-font-size: 16px;\r\n    -fx-font-weight: bold;\r\n}\r\n\r\nTextField:focused {\r\n    -fx-background-color: #E0FFFF;\r\n}\r\n\r\nPasswordField {\r\n    -fx-border-color: transparent transparent lightgray transparent;\r\n    -fx-border-width: 0 0 1 0;\r\n    -fx-background-color: transparent;\r\n    -fx-prompt-text-fill: rgb(57, 245, 35);\r\n    -fx-text-fill: gold;\r\n    -fx-background-radius: 15 15 0 0;\r\n    -fx-alignment: center;\r\n    -fx-font-family: \"Comic Sans MS\";\r\n    -fx-font-size: 16px;\r\n    -fx-font-weight: bold;\r\n}\r\n\r\nPasswordField:focused {\r\n    -fx-background-color: #E0FFFF;\r\n}\r\n\r\nProgressBar {\r\n    -fx-background-color: transparent;\r\n}\r\n\r\nProgressBar .bar {\r\n    -fx-background-color: olive;\r\n}\r\n\r\nProgressBar .track {\r\n    -fx-background-color: lightgray;\r\n}\r\n\r\nRadioButton {\r\n    -fx-text-fill: olive;\r\n    -fx-font-family: \"Comic Sans MS\";\r\n    -fx-font-size: 16px;\r\n    -fx-font-weight: bold;\r\n}\r\n\r\nRadioButton .dot {\r\n    -fx-background-color: lightgray;\r\n}\r\n\r\nRadioButton:selected .dot {\r\n    -fx-background-color: olive;\r\n}\r\n\r\nRadioButton:hover {\r\n    -fx-cursor: hand;\r\n}\r\n\r\nToggleButton {\r\n    -fx-background-color: transparent;\r\n    -fx-text-fill: olive;\r\n    -fx-border-color: lightgray;\r\n    -fx-border-width: 1;\r\n    -fx-background-radius: 15;\r\n    -fx-border-radius: 15;\r\n    -fx-font-family: \"Comic Sans MS\";\r\n    -fx-font-size: 16px;\r\n    -fx-font-weight: bold;\r\n}\r\n\r\nToggleButton:selected {\r\n    -fx-background-color: #ADD8E6;\r\n}\r\n\r\nToggleButton:hover {\r\n    -fx-cursor: hand;\r\n    -fx-background-color: #E0FFFF;\r\n}\r\n\r\nSlider {\r\n     -fx-background-color: transparent;\r\n }\r\n\r\n Slider .track {\r\n     -fx-background-color: lightgray;\r\n }\r\n\r\n Slider .thumb {\r\n     -fx-background-color: olive;\r\n }\r\n\r\nButton {\r\n    -fx-border-color: lightgray;\r\n    -fx-border-width: 1;\r\n    -fx-background-color: white;\r\n    -fx-text-fill: olive;\r\n    -fx-background-radius: 15;\r\n    -fx-border-radius: 15;\r\n    -fx-font-family: \"Comic Sans MS\";\r\n    -fx-font-size: 16px;\r\n    -fx-font-weight: bold;\r\n}\r\n\r\n.check-box {\r\n  -fx-background-color: transparent;\r\n  -fx-padding: 10px;\r\n  -fx-font-size: 16px;\r\n  -fx-font-weight: bold;\r\n  -fx-text-fill: #333;\r\n}\r\n\r\n.check-box:selected {\r\n  -fx-background-color: #4CAF50;\r\n  -fx-text-fill: white;\r\n}\r\n\r\n.check-box .box {\r\n  -fx-background-color: white;\r\n  -fx-border-color: #ccc;\r\n  -fx-border-width: 2px;\r\n  -fx-border-radius: 3px;\r\n  -fx-padding: 5px;\r\n}\r\n\r\n.check-box:selected .box {\r\n  -fx-background-color: #4CAF50;\r\n  -fx-border-color: #4CAF50;\r\n}\r\n\r\n.check-box .mark {\r\n  -fx-background-color: white;\r\n  -fx-shape: \"M1,4 L4,7 L7,1\";\r\n  -fx-scale-shape: false;\r\n  -fx-padding: 0.5em;\r\n}\r\n\r\n.check-box:selected .mark {\r\n  -fx-background-color: white;\r\n}\r\n\r\n.table-cell {\r\n    -fx-text-fill: #0078d7;\r\n    -fx-background-color: transparent;\r\n    -fx-border-color: black;\r\n    -fx-border-width: 1px;\r\n}\r\n\r\n.table-row-cell:odd {\r\n    -fx-background-color: #f0f0f0;\r\n}\r\n\r\n.table-row-cell:selected {\r\n    -fx-background-color: #0078d7;\r\n    -fx-text-fill: white;\r\n}\r\n\r\n\r\n\r\n\r\nButton:hover {\r\n    -fx-cursor: hand;\r\n    -fx-background-color: #E0FFFF;\r\n}\r\n\r\nButton:pressed {\r\n    -fx-background-color: #ADD8E6;\r\n}\r\n\r\n.clickable {\r\n    -fx-cursor: hand;\r\n    -fx-underline: true;\r\n}\r\n\r\n\r\nLabel {\r\n    -fx-text-fill: olive;\r\n    -fx-font-family: \"Comic Sans MS\";\r\n    -fx-font-size: 18px;\r\n    -fx-font-weight: bolder;\r\n    -fx-text-fill: red;\r\n}\r\n\r\nAlert {\r\n    -fx-border-color: lightgray;\r\n    -fx-border-width: 1;\r\n    -fx-background-color: transparent;\r\n    -fx-text-fill: olive;\r\n    -fx-background-radius: 15;\r\n    -fx-border-radius: 15;\r\n    -fx-font-family: \"Comic Sans MS\";\r\n    -fx-font-size: 16px;\r\n    -fx-font-weight: bold;\r\n}\r\n\r\nImage {\r\n    -fx-border-color: transparent;\r\n    -fx-border-width: 1;\r\n    -fx-background-color: transparent;\r\n    -fx-background-radius: 50%;\r\n    -fx-border-radius: 50%;\r\n}\r\n\r\nImageView {\r\n    -fx-border-color: transparent;\r\n    -fx-border-width: 1;\r\n    -fx-background-color: transparent;\r\n    -fx-background-radius: 50%;\r\n    -fx-border-radius: 50%;\r\n}\r\n\r\n.back-ground {\r\n    -fx-background-color: white;\r\n}\r\n\r\n.pause-menu {\r\n    -fx-background-color: cornsilk;\r\n}\r\n\r\n.headers {\r\n    -fx-font-family: \"Comic Sans MS\";\r\n    -fx-font-size: 24px;\r\n    -fx-font-weight: bold;\r\n    -fx-text-fill: black;\r\n}\r\n\r\n.player2 {\r\n    -fx-text-fill: darkorchid;\r\n}\r\n\r\n.player3 {\r\n    -fx-text-fill: aqua;\r\n}\r\n\r\n.other-players {\r\n    -fx-text-fill: darkgray;\r\n}\r\n\r\n#red-text {\r\n    -fx-text-fill: red;\r\n}\r\n\r\n.bordered-image {\r\n    -fx-border-color: yellow;\r\n    -fx-border-width: 5;\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/Sample/View/CSS/style.css b/src/main/resources/Sample/View/CSS/style.css
--- a/src/main/resources/Sample/View/CSS/style.css	(revision f9bb180293b1f8ec200f5452f43070a0516a10ba)
+++ b/src/main/resources/Sample/View/CSS/style.css	(date 1719693146404)
@@ -85,16 +85,16 @@
 }
 
 Slider {
-     -fx-background-color: transparent;
- }
+    -fx-background-color: transparent;
+}
 
- Slider .track {
-     -fx-background-color: lightgray;
- }
+Slider .track {
+    -fx-background-color: lightgray;
+}
 
- Slider .thumb {
-     -fx-background-color: olive;
- }
+Slider .thumb {
+    -fx-background-color: olive;
+}
 
 Button {
     -fx-border-color: lightgray;
@@ -109,40 +109,40 @@
 }
 
 .check-box {
-  -fx-background-color: transparent;
-  -fx-padding: 10px;
-  -fx-font-size: 16px;
-  -fx-font-weight: bold;
-  -fx-text-fill: #333;
+    -fx-background-color: transparent;
+    -fx-padding: 10px;
+    -fx-font-size: 16px;
+    -fx-font-weight: bold;
+    -fx-text-fill: #333;
 }
 
 .check-box:selected {
-  -fx-background-color: #4CAF50;
-  -fx-text-fill: white;
+    -fx-background-color: #4CAF50;
+    -fx-text-fill: white;
 }
 
 .check-box .box {
-  -fx-background-color: white;
-  -fx-border-color: #ccc;
-  -fx-border-width: 2px;
-  -fx-border-radius: 3px;
-  -fx-padding: 5px;
+    -fx-background-color: white;
+    -fx-border-color: #ccc;
+    -fx-border-width: 2px;
+    -fx-border-radius: 3px;
+    -fx-padding: 5px;
 }
 
 .check-box:selected .box {
-  -fx-background-color: #4CAF50;
-  -fx-border-color: #4CAF50;
+    -fx-background-color: #4CAF50;
+    -fx-border-color: #4CAF50;
 }
 
 .check-box .mark {
-  -fx-background-color: white;
-  -fx-shape: "M1,4 L4,7 L7,1";
-  -fx-scale-shape: false;
-  -fx-padding: 0.5em;
+    -fx-background-color: white;
+    -fx-shape: "M1,4 L4,7 L7,1";
+    -fx-scale-shape: false;
+    -fx-padding: 0.5em;
 }
 
 .check-box:selected .mark {
-  -fx-background-color: white;
+    -fx-background-color: white;
 }
 
 .table-cell {
@@ -162,8 +162,6 @@
 }
 
 
-
-
 Button:hover {
     -fx-cursor: hand;
     -fx-background-color: #E0FFFF;
@@ -250,3 +248,23 @@
     -fx-border-color: yellow;
     -fx-border-width: 5;
 }
+
+.card-button {
+    -fx-background-size: cover;
+    -fx-background-position: center center;
+    -fx-background-repeat: no-repeat;
+}
+
+.label {
+    -fx-text-fill: olive;
+    -fx-font-family: "Comic Sans MS";
+    -fx-font-size: 16px;
+    -fx-font-weight: bolder;
+    -fx-text-fill: red;
+}
+.button{
+    -fx-text-fill: olive;
+    -fx-font-family: "Castellar";
+    -fx-font-size: 20px;
+    -fx-text-fill: #bbd31e;
+}
\ No newline at end of file
Index: src/main/java/Sample/Controller/MainController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Sample.Controller;\r\n\r\nimport Sample.Model.User;\r\nimport Sample.View.LeaderMenu;\r\nimport Sample.View.LoginMenu;\r\nimport Sample.View.ProfileMenu;\r\nimport Sample.View.StartNewGameMenu;\r\nimport javafx.fxml.FXML;\r\nimport javafx.scene.ImageCursor;\r\nimport javafx.scene.control.Alert;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.image.Image;\r\nimport javafx.scene.input.MouseEvent;\r\n\r\nimport java.util.Objects;\r\n\r\npublic class MainController {\r\n    private GameController gameController = new GameController();\r\n    @FXML\r\n    private Label username;\r\n\r\n    public void initialize() {\r\n        username.setText(\"Hello, \" + User.getUserLoginIn().getUsername() + \"!\");\r\n        gameController.loadGame();\r\n    }\r\n\r\n    public void startNewGame() throws Exception {\r\n        StartNewGameMenu startNewGameMenu = new StartNewGameMenu();\r\n        startNewGameMenu.start(ApplicationController.getStage());\r\n    }\r\n\r\n    public void backToLoginMenu() throws Exception {\r\n        if (User.getUserLoginIn().getUsername().equals(\"Guest\")) {\r\n            User.getUsers().remove(User.getUserLoginIn());\r\n        }\r\n        User.setUserLoginIn(null);\r\n        LoginMenu loginMenu = new LoginMenu();\r\n        loginMenu.start(ApplicationController.getStage());\r\n    }\r\n\r\n    public void goToProfileMenu() throws Exception {\r\n        if (User.getUserLoginIn().getUsername().equals(\"Guest\")) {\r\n            Alert alert = new Alert(Alert.AlertType.WARNING);\r\n            alert.setTitle(\"Impossible action\");\r\n            alert.setHeaderText(\"You do not have an account\");\r\n            alert.setContentText(\"Your entry to the profile menu is not possible\");\r\n            alert.show();\r\n            return;\r\n        }\r\n        ProfileMenu profileMenu = new ProfileMenu();\r\n        profileMenu.start(ApplicationController.getStage());\r\n    }\r\n\r\n    public void setMouseImage(MouseEvent mouseEvent) {\r\n        Image cursor = new Image(Objects.requireNonNull(LoginMenu.class.getResourceAsStream(\"Images/Icons/cursor.png\")));\r\n        username.getScene().setCursor(new ImageCursor(cursor));\r\n    }\r\n\r\n    public void goToLeaderMenu(MouseEvent mouseEvent) throws Exception {\r\n        LeaderMenu leaderMenu = new LeaderMenu();\r\n        leaderMenu.start(ApplicationController.getStage());\r\n    }\r\n\r\n    public void goToDeckMenu(MouseEvent mouseEvent) {\r\n\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Sample/Controller/MainController.java b/src/main/java/Sample/Controller/MainController.java
--- a/src/main/java/Sample/Controller/MainController.java	(revision f9bb180293b1f8ec200f5452f43070a0516a10ba)
+++ b/src/main/java/Sample/Controller/MainController.java	(date 1719693360623)
@@ -21,10 +21,18 @@
 
     public void initialize() {
         username.setText("Hello, " + User.getUserLoginIn().getUsername() + "!");
-        gameController.loadGame();
+//        gameController.loadGame();
     }
 
     public void startNewGame() throws Exception {
+        if (User.getUserLoginIn().getCommonCardsInDeck().size() < 22 || User.getUserLoginIn().getSpecialCardsInDeck().size() > 10) {
+            Alert alert = new Alert(Alert.AlertType.WARNING);
+            alert.setTitle("Unacceptable deck");
+            alert.setHeaderText("Change your deck via the deck menu");
+            alert.setContentText("This deck is unacceptable for entry into the game");
+            alert.showAndWait();
+            return;
+        }
         StartNewGameMenu startNewGameMenu = new StartNewGameMenu();
         startNewGameMenu.start(ApplicationController.getStage());
     }
@@ -44,7 +52,7 @@
             alert.setTitle("Impossible action");
             alert.setHeaderText("You do not have an account");
             alert.setContentText("Your entry to the profile menu is not possible");
-            alert.show();
+            alert.showAndWait();
             return;
         }
         ProfileMenu profileMenu = new ProfileMenu();
Index: src/main/resources/Sample/View/FXML/Game.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n\r\n<?import javafx.scene.control.*?>\r\n<?import javafx.scene.image.*?>\r\n<?import javafx.scene.layout.*?>\r\n<?import javafx.scene.text.*?>\r\n\r\n<AnchorPane fx:id=\"pane\" maxHeight=\"-Infinity\" maxWidth=\"-Infinity\" minHeight=\"-Infinity\" minWidth=\"-Infinity\" prefHeight=\"720.0\" prefWidth=\"1280.0\" stylesheets=\"@../CSS/Button.css\" xmlns=\"http://javafx.com/javafx/17.0.2-ea\" xmlns:fx=\"http://javafx.com/fxml/1\" fx:controller=\"Sample.Controller.GameController\">\r\n   <ImageView fitHeight=\"720\" fitWidth=\"1280\">\r\n      <Image url=\"@../Images/Board.jpg\">\r\n      </Image>\r\n   </ImageView>\r\n\r\n</AnchorPane>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/Sample/View/FXML/Game.fxml b/src/main/resources/Sample/View/FXML/Game.fxml
--- a/src/main/resources/Sample/View/FXML/Game.fxml	(revision f9bb180293b1f8ec200f5452f43070a0516a10ba)
+++ b/src/main/resources/Sample/View/FXML/Game.fxml	(date 1719693133209)
@@ -1,14 +1,219 @@
 <?xml version="1.0" encoding="UTF-8"?>
 
-<?import javafx.scene.control.*?>
 <?import javafx.scene.image.*?>
 <?import javafx.scene.layout.*?>
-<?import javafx.scene.text.*?>
 
 <AnchorPane fx:id="pane" maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="720.0" prefWidth="1280.0" stylesheets="@../CSS/Button.css" xmlns="http://javafx.com/javafx/17.0.2-ea" xmlns:fx="http://javafx.com/fxml/1" fx:controller="Sample.Controller.GameController">
    <ImageView fitHeight="720" fitWidth="1280">
       <Image url="@../Images/Board.jpg">
       </Image>
    </ImageView>
+    <HBox alignment="BOTTOM_LEFT" layoutX="385.0" layoutY="564.0" prefHeight="86.0" prefWidth="624.0">
+        <GridPane fx:id="myHandCards" prefHeight="85.0" prefWidth="624.0">
+            <columnConstraints>
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="52.0" />
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="52.0" />
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="52.0" />
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="52.0" />
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="52.0" />
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="52.0" />
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="52.0" />
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="52.0" />
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="52.0" />
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="52.0" />
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="52.0" />
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="52.0" />
+            </columnConstraints>
+            <rowConstraints>
+                <RowConstraints minHeight="10.0" prefHeight="85.0" vgrow="SOMETIMES" />
+            </rowConstraints>
+            <ImageView fitHeight="85.0" fitWidth="52.0" pickOnBounds="true" />
+            <ImageView fitHeight="85.0" fitWidth="52.0" pickOnBounds="true" GridPane.columnIndex="1" />
+            <ImageView fitHeight="85.0" fitWidth="52.0" pickOnBounds="true" GridPane.columnIndex="2" />
+            <ImageView fitHeight="85.0" fitWidth="52.0" pickOnBounds="true" GridPane.columnIndex="3" />
+            <ImageView fitHeight="85.0" fitWidth="52.0" pickOnBounds="true" GridPane.columnIndex="4" />
+            <ImageView fitHeight="85.0" fitWidth="52.0" pickOnBounds="true" GridPane.columnIndex="5" />
+            <ImageView fitHeight="85.0" fitWidth="52.0" pickOnBounds="true" GridPane.columnIndex="6" />
+            <ImageView fitHeight="85.0" fitWidth="52.0" pickOnBounds="true" GridPane.columnIndex="7" />
+            <ImageView fitHeight="85.0" fitWidth="52.0" pickOnBounds="true" GridPane.columnIndex="8" />
+            <ImageView fitHeight="85.0" fitWidth="52.0" pickOnBounds="true" GridPane.columnIndex="9" />
+            <ImageView fitHeight="85.0" fitWidth="52.0" pickOnBounds="true" GridPane.columnIndex="10" />
+            <ImageView fitHeight="85.0" fitWidth="52.0" pickOnBounds="true" GridPane.columnIndex="11" />
+        </GridPane>
+    </HBox>
+    <HBox alignment="BOTTOM_LEFT" layoutX="481.0" layoutY="294.0" prefHeight="75.0" prefWidth="520.0">
+        <GridPane fx:id="myCloseCombatCardsPlayed" prefHeight="75.0" prefWidth="520.0">
+            <columnConstraints>
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="52.0" />
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="52.0" />
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="52.0" />
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="52.0" />
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="52.0" />
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="52.0" />
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="52.0" />
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="52.0" />
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="52.0" />
+                <ColumnConstraints />
+            </columnConstraints>
+            <rowConstraints>
+                <RowConstraints minHeight="10.0" prefHeight="75.0" vgrow="SOMETIMES" />
+            </rowConstraints>
+            <ImageView fitHeight="75.0" fitWidth="51.0" pickOnBounds="true" />
+            <ImageView fitHeight="75.0" fitWidth="51.0" pickOnBounds="true" GridPane.columnIndex="1" />
+            <ImageView fitHeight="75.0" fitWidth="51.0" pickOnBounds="true" GridPane.columnIndex="2" />
+            <ImageView fitHeight="75.0" fitWidth="51.0" pickOnBounds="true" GridPane.columnIndex="3" />
+            <ImageView fitHeight="75.0" fitWidth="51.0" pickOnBounds="true" GridPane.columnIndex="4" />
+            <ImageView fitHeight="75.0" fitWidth="51.0" pickOnBounds="true" GridPane.columnIndex="5" />
+            <ImageView fitHeight="75.0" fitWidth="51.0" pickOnBounds="true" GridPane.columnIndex="6" />
+            <ImageView fitHeight="75.0" fitWidth="51.0" pickOnBounds="true" GridPane.columnIndex="7" />
+            <ImageView fitHeight="75.0" fitWidth="51.0" pickOnBounds="true" GridPane.columnIndex="8" />
+            <ImageView fitHeight="75.0" fitWidth="51.0" pickOnBounds="true" GridPane.columnIndex="9" />
+        </GridPane>
+    </HBox>
+    <HBox alignment="BOTTOM_LEFT" layoutX="481.0" layoutY="382.0" prefHeight="75.0" prefWidth="520.0">
+        <GridPane fx:id="myRangedCombatCardsPlayed" prefHeight="75.0" prefWidth="520.0">
+            <columnConstraints>
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="52.0" />
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="52.0" />
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="52.0" />
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="52.0" />
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="52.0" />
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="52.0" />
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="52.0" />
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="52.0" />
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="52.0" />
+                <ColumnConstraints />
+            </columnConstraints>
+            <rowConstraints>
+                <RowConstraints minHeight="10.0" prefHeight="75.0" vgrow="SOMETIMES" />
+            </rowConstraints>
+            <ImageView fitHeight="75.0" fitWidth="51.0" pickOnBounds="true" />
+            <ImageView fitHeight="75.0" fitWidth="51.0" pickOnBounds="true" GridPane.columnIndex="1" />
+            <ImageView fitHeight="75.0" fitWidth="51.0" pickOnBounds="true" GridPane.columnIndex="2" />
+            <ImageView fitHeight="75.0" fitWidth="51.0" pickOnBounds="true" GridPane.columnIndex="3" />
+            <ImageView fitHeight="75.0" fitWidth="51.0" pickOnBounds="true" GridPane.columnIndex="4" />
+            <ImageView fitHeight="75.0" fitWidth="51.0" pickOnBounds="true" GridPane.columnIndex="5" />
+            <ImageView fitHeight="75.0" fitWidth="51.0" pickOnBounds="true" GridPane.columnIndex="6" />
+            <ImageView fitHeight="75.0" fitWidth="51.0" pickOnBounds="true" GridPane.columnIndex="7" />
+            <ImageView fitHeight="75.0" fitWidth="51.0" pickOnBounds="true" GridPane.columnIndex="8" />
+            <ImageView fitHeight="75.0" fitWidth="51.0" pickOnBounds="true" GridPane.columnIndex="9" />
+        </GridPane>
+    </HBox>
+    <HBox alignment="BOTTOM_LEFT" layoutX="481.0" layoutY="473.0" prefHeight="75.0" prefWidth="520.0">
+        <GridPane fx:id="mySiegeCardsPlayed" prefHeight="75.0" prefWidth="520.0">
+            <columnConstraints>
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="52.0" />
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="52.0" />
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="52.0" />
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="52.0" />
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="52.0" />
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="52.0" />
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="52.0" />
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="52.0" />
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="52.0" />
+                <ColumnConstraints />
+            </columnConstraints>
+            <rowConstraints>
+                <RowConstraints minHeight="10.0" prefHeight="75.0" vgrow="SOMETIMES" />
+            </rowConstraints>
+            <ImageView fitHeight="75.0" fitWidth="51.0" pickOnBounds="true" />
+            <ImageView fitHeight="75.0" fitWidth="51.0" pickOnBounds="true" GridPane.columnIndex="1" />
+            <ImageView fitHeight="75.0" fitWidth="51.0" pickOnBounds="true" GridPane.columnIndex="2" />
+            <ImageView fitHeight="75.0" fitWidth="51.0" pickOnBounds="true" GridPane.columnIndex="3" />
+            <ImageView fitHeight="75.0" fitWidth="51.0" pickOnBounds="true" GridPane.columnIndex="4" />
+            <ImageView fitHeight="75.0" fitWidth="51.0" pickOnBounds="true" GridPane.columnIndex="5" />
+            <ImageView fitHeight="75.0" fitWidth="51.0" pickOnBounds="true" GridPane.columnIndex="6" />
+            <ImageView fitHeight="75.0" fitWidth="51.0" pickOnBounds="true" GridPane.columnIndex="7" />
+            <ImageView fitHeight="75.0" fitWidth="51.0" pickOnBounds="true" GridPane.columnIndex="8" />
+            <ImageView fitHeight="75.0" fitWidth="51.0" pickOnBounds="true" GridPane.columnIndex="9" />
+        </GridPane>
+    </HBox>
+    <HBox alignment="BOTTOM_LEFT" layoutX="481.0" layoutY="15.0" prefHeight="75.0" prefWidth="520.0">
+        <GridPane fx:id="competitorSiegeCardsPlayed" prefHeight="75.0" prefWidth="520.0">
+            <columnConstraints>
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="52.0" />
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="52.0" />
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="52.0" />
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="52.0" />
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="52.0" />
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="52.0" />
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="52.0" />
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="52.0" />
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="52.0" />
+                <ColumnConstraints />
+            </columnConstraints>
+            <rowConstraints>
+                <RowConstraints minHeight="10.0" prefHeight="75.0" vgrow="SOMETIMES" />
+            </rowConstraints>
+            <ImageView fitHeight="75.0" fitWidth="51.0" pickOnBounds="true" />
+            <ImageView fitHeight="75.0" fitWidth="51.0" pickOnBounds="true" GridPane.columnIndex="1" />
+            <ImageView fitHeight="75.0" fitWidth="51.0" pickOnBounds="true" GridPane.columnIndex="2" />
+            <ImageView fitHeight="75.0" fitWidth="51.0" pickOnBounds="true" GridPane.columnIndex="3" />
+            <ImageView fitHeight="75.0" fitWidth="51.0" pickOnBounds="true" GridPane.columnIndex="4" />
+            <ImageView fitHeight="75.0" fitWidth="51.0" pickOnBounds="true" GridPane.columnIndex="5" />
+            <ImageView fitHeight="75.0" fitWidth="51.0" pickOnBounds="true" GridPane.columnIndex="6" />
+            <ImageView fitHeight="75.0" fitWidth="51.0" pickOnBounds="true" GridPane.columnIndex="7" />
+            <ImageView fitHeight="75.0" fitWidth="51.0" pickOnBounds="true" GridPane.columnIndex="8" />
+            <ImageView fitHeight="75.0" fitWidth="51.0" pickOnBounds="true" GridPane.columnIndex="9" />
+        </GridPane>
+    </HBox>
+    <HBox alignment="BOTTOM_LEFT" layoutX="481.0" layoutY="102.0" prefHeight="75.0" prefWidth="520.0">
+        <GridPane fx:id="competitorRangedCombatCardsPlayed" prefHeight="75.0" prefWidth="520.0">
+            <columnConstraints>
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="52.0" />
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="52.0" />
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="52.0" />
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="52.0" />
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="52.0" />
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="52.0" />
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="52.0" />
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="52.0" />
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="52.0" />
+                <ColumnConstraints />
+            </columnConstraints>
+            <rowConstraints>
+                <RowConstraints minHeight="10.0" prefHeight="75.0" vgrow="SOMETIMES" />
+            </rowConstraints>
+            <ImageView fitHeight="75.0" fitWidth="51.0" pickOnBounds="true" />
+            <ImageView fitHeight="75.0" fitWidth="51.0" pickOnBounds="true" GridPane.columnIndex="1" />
+            <ImageView fitHeight="75.0" fitWidth="51.0" pickOnBounds="true" GridPane.columnIndex="2" />
+            <ImageView fitHeight="75.0" fitWidth="51.0" pickOnBounds="true" GridPane.columnIndex="3" />
+            <ImageView fitHeight="75.0" fitWidth="51.0" pickOnBounds="true" GridPane.columnIndex="4" />
+            <ImageView fitHeight="75.0" fitWidth="51.0" pickOnBounds="true" GridPane.columnIndex="5" />
+            <ImageView fitHeight="75.0" fitWidth="51.0" pickOnBounds="true" GridPane.columnIndex="6" />
+            <ImageView fitHeight="75.0" fitWidth="51.0" pickOnBounds="true" GridPane.columnIndex="7" />
+            <ImageView fitHeight="75.0" fitWidth="51.0" pickOnBounds="true" GridPane.columnIndex="8" />
+            <ImageView fitHeight="75.0" fitWidth="51.0" pickOnBounds="true" GridPane.columnIndex="9" />
+        </GridPane>
+    </HBox>
+    <HBox alignment="BOTTOM_LEFT" layoutX="481.0" layoutY="193.0" prefHeight="75.0" prefWidth="520.0">
+        <GridPane fx:id="competitorCloseCombatCardsPlayed" prefHeight="75.0" prefWidth="520.0">
+            <columnConstraints>
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="52.0" />
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="52.0" />
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="52.0" />
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="52.0" />
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="52.0" />
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="52.0" />
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="52.0" />
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="52.0" />
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="52.0" />
+                <ColumnConstraints />
+            </columnConstraints>
+            <rowConstraints>
+                <RowConstraints minHeight="10.0" prefHeight="75.0" vgrow="SOMETIMES" />
+            </rowConstraints>
+            <ImageView fitHeight="75.0" fitWidth="51.0" pickOnBounds="true" />
+            <ImageView fitHeight="75.0" fitWidth="51.0" pickOnBounds="true" GridPane.columnIndex="1" />
+            <ImageView fitHeight="75.0" fitWidth="51.0" pickOnBounds="true" GridPane.columnIndex="2" />
+            <ImageView fitHeight="75.0" fitWidth="51.0" pickOnBounds="true" GridPane.columnIndex="3" />
+            <ImageView fitHeight="75.0" fitWidth="51.0" pickOnBounds="true" GridPane.columnIndex="4" />
+            <ImageView fitHeight="75.0" fitWidth="51.0" pickOnBounds="true" GridPane.columnIndex="5" />
+            <ImageView fitHeight="75.0" fitWidth="51.0" pickOnBounds="true" GridPane.columnIndex="6" />
+            <ImageView fitHeight="75.0" fitWidth="51.0" pickOnBounds="true" GridPane.columnIndex="7" />
+            <ImageView fitHeight="75.0" fitWidth="51.0" pickOnBounds="true" GridPane.columnIndex="8" />
+            <ImageView fitHeight="75.0" fitWidth="51.0" pickOnBounds="true" GridPane.columnIndex="9" />
+        </GridPane>
+    </HBox>
 
 </AnchorPane>
Index: src/main/java/Sample/Controller/StartNewGameController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Sample.Controller;\r\n\r\nimport Sample.Model.User;\r\nimport Sample.View.GameMenu;\r\nimport Sample.View.LeaderMenu;\r\nimport Sample.View.MainMenu;\r\nimport javafx.fxml.FXML;\r\nimport javafx.scene.control.Alert;\r\nimport javafx.scene.control.TextField;\r\nimport javafx.scene.input.MouseEvent;\r\n\r\npublic class StartNewGameController {\r\n    @FXML\r\n    private TextField usernameInput;\r\n\r\n    public void startNewGameWithUsername(MouseEvent mouseEvent) throws Exception {\r\n        String competitorUsername = usernameInput.getText();\r\n        if (competitorUsername.equals(User.getUserLoginIn().getUsername())) {\r\n            Alert alert = new Alert(Alert.AlertType.WARNING);\r\n            alert.setTitle(\"Invalid username\");\r\n            alert.setHeaderText(\"You cannot enter the game with yourself\");\r\n            alert.setContentText(\"Please do not enter your username\");\r\n            alert.showAndWait();\r\n            return;\r\n        }\r\n        if (User.getUserByUsername(competitorUsername) == null) {\r\n            Alert alert = new Alert(Alert.AlertType.WARNING);\r\n            alert.setTitle(\"Invalid username\");\r\n            alert.setHeaderText(\"There is no such user in the system\");\r\n            alert.setContentText(\"The absence of such a user\");\r\n            alert.showAndWait();\r\n            return;\r\n        }\r\n        User.setUserLoginIn(User.getUserByUsername(competitorUsername));\r\n        LeaderMenu leaderMenu = new LeaderMenu();\r\n        leaderMenu.start(ApplicationController.getStage());\r\n    }\r\n\r\n    public void backToMainMenu() throws Exception {\r\n        MainMenu mainMenu = new MainMenu();\r\n        mainMenu.start(ApplicationController.getStage());\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Sample/Controller/StartNewGameController.java b/src/main/java/Sample/Controller/StartNewGameController.java
--- a/src/main/java/Sample/Controller/StartNewGameController.java	(revision f9bb180293b1f8ec200f5452f43070a0516a10ba)
+++ b/src/main/java/Sample/Controller/StartNewGameController.java	(date 1719693133213)
@@ -31,7 +31,13 @@
             alert.showAndWait();
             return;
         }
-        User.setUserLoginIn(User.getUserByUsername(competitorUsername));
+        User competitor = User.getUserByUsername(competitorUsername);
+        User.getUserLoginIn().setCompetitor(competitor);
+        assert competitor != null;
+        competitor.setCompetitor(User.getUserLoginIn());
+        User.setUserLoginIn(competitor);
+//        GameMenu gameMenu = new GameMenu();
+//        gameMenu.start(ApplicationController.getStage());
         LeaderMenu leaderMenu = new LeaderMenu();
         leaderMenu.start(ApplicationController.getStage());
     }
Index: src/main/java/Sample/Model/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Sample.Model;\r\n\r\nimport Sample.CardEnums.CommonCard;\r\nimport Sample.CardEnums.Faction;\r\nimport Sample.CardEnums.Leader;\r\nimport Sample.CardEnums.SpecialCard;\r\nimport com.google.gson.Gson;\r\n\r\nimport java.io.FileWriter;\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.Comparator;\r\nimport java.util.HashMap;\r\n\r\n\r\npublic class User {\r\n    private String username;\r\n    private String password;\r\n    private String email;\r\n    private String nickname;\r\n    private int gamesPlayed;\r\n    private int wins;\r\n    private int draws;\r\n    private int loses;\r\n    private double maxScore;\r\n    private static final ArrayList<User> allUsers = new ArrayList<>();\r\n    private static User userLoginIn;\r\n    private HashMap<String, String> securityQuestionsAndAnswers = new HashMap<>();\r\n    private Faction factionSelected = Faction.NorthernRealms;\r\n\r\n    private Leader factionLeader = Leader.KingOfTemeria;\r\n\r\n    private final ArrayList<CommonCard> commonCardsInDeck = new ArrayList<>();\r\n    private final ArrayList<SpecialCard> specialCardsInDeck = new ArrayList<>();\r\n    private final ArrayList<CommonCard> commonCardInBattleField = new ArrayList<>();\r\n    private final ArrayList<SpecialCard> specialCardsBattleField = new ArrayList<>();\r\n    private final ArrayList<CommonCard> closeCombatBattleField = new ArrayList<>();\r\n    private final ArrayList<CommonCard> commonCardsInDiscard = new ArrayList<>();\r\n    private final ArrayList<SpecialCard> specialCardsDiscard = new ArrayList<>();\r\n    private final ArrayList<CommonCard> siegeIsPlayed = new ArrayList<>();\r\n    private final ArrayList<CommonCard> rangedIsPlayed = new ArrayList<>();\r\n    private SpecialCard specialFieldInCloseCombat = null;\r\n    private SpecialCard specialFieldInSiege = null;\r\n    private SpecialCard specialFieldInRanged = null;\r\n\r\n    public User(String username, String password, String email, String nickname) {\r\n        this.username = username;\r\n        this.password = password;\r\n        this.email = email;\r\n        this.nickname = nickname;\r\n        allUsers.add(this);\r\n    }\r\n\r\n    public static ArrayList<User> getUsers() {\r\n        return allUsers;\r\n    }\r\n\r\n\r\n    public static User getUserByUsername(String username) {\r\n        for (User user : allUsers) {\r\n            if (user.getUsername().equals(username)) {\r\n                return user;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public static User getUserLoginIn() {\r\n        return userLoginIn;\r\n    }\r\n\r\n    public static void setUserLoginIn(User userLoginIn) {\r\n        User.userLoginIn = userLoginIn;\r\n    }\r\n\r\n    public void setFactionLeader(Leader factionLeader) {\r\n        this.factionLeader = factionLeader;\r\n    }\r\n\r\n    public Leader getFactionLeader() {\r\n        return factionLeader;\r\n    }\r\n\r\n    public ArrayList<SpecialCard> getSpecialCardsBattleField() {\r\n        return specialCardsBattleField;\r\n    }\r\n\r\n    public void setUsername(String username) {\r\n        this.username = username;\r\n    }\r\n\r\n    public void setPassword(String password) {\r\n        this.password = password;\r\n    }\r\n\r\n    public void setEmail(String email) {\r\n        this.email = email;\r\n    }\r\n\r\n    public void setNickname(String nickname) {\r\n        this.nickname = nickname;\r\n    }\r\n\r\n\r\n    public String getUsername() {\r\n        return username;\r\n    }\r\n\r\n    public String getPassword() {\r\n        return password;\r\n    }\r\n\r\n    public String getEmail() {\r\n        return email;\r\n    }\r\n\r\n    public String getNickname() {\r\n        return nickname;\r\n    }\r\n\r\n    public void setSecurityQuestionsAndAnswers(HashMap<String, String> securityQuestionsAndAnswers) {\r\n        this.securityQuestionsAndAnswers = securityQuestionsAndAnswers;\r\n    }\r\n\r\n    public HashMap<String, String> getSecurityQuestionsAndAnswers() {\r\n        return securityQuestionsAndAnswers;\r\n    }\r\n\r\n    public void setFactionSelected(Faction factionSelected) {\r\n        this.factionSelected = factionSelected;\r\n    }\r\n\r\n    public void setSpecialFieldInCloseCombat(SpecialCard specialFieldInCloseCombat) {\r\n        this.specialFieldInCloseCombat = specialFieldInCloseCombat;\r\n    }\r\n\r\n    public void setSpecialFieldInSiege(SpecialCard specialFieldInSiege) {\r\n        this.specialFieldInSiege = specialFieldInSiege;\r\n    }\r\n\r\n    public void setSpecialFieldInRanged(SpecialCard specialFieldInRanged) {\r\n        this.specialFieldInRanged = specialFieldInRanged;\r\n    }\r\n\r\n    public Faction getFactionSelected() {\r\n        return factionSelected;\r\n    }\r\n\r\n    public ArrayList<CommonCard> getCommonCardsInDeck() {\r\n        return commonCardsInDeck;\r\n    }\r\n\r\n    public ArrayList<SpecialCard> getSpecialCardsInDeck() {\r\n        return specialCardsInDeck;\r\n    }\r\n\r\n    public ArrayList<CommonCard> getCommonCardInBattleField() {\r\n        return commonCardInBattleField;\r\n    }\r\n\r\n    public ArrayList<SpecialCard> getSpecialCardsCanPlay() {\r\n        return specialCardsBattleField;\r\n    }\r\n\r\n    public ArrayList<CommonCard> getCommonCardsInDiscard() {\r\n        return commonCardsInDiscard;\r\n    }\r\n\r\n    public ArrayList<SpecialCard> getSpecialCardsDiscard() {\r\n        return specialCardsDiscard;\r\n    }\r\n\r\n    public ArrayList<CommonCard> getCloseCombatBattleField() {\r\n        return closeCombatBattleField;\r\n    }\r\n\r\n    public ArrayList<CommonCard> getSiegeIsPlayed() {\r\n        return siegeIsPlayed;\r\n    }\r\n\r\n    public ArrayList<CommonCard> getRangedIsPlayed() {\r\n        return rangedIsPlayed;\r\n    }\r\n\r\n    public SpecialCard getSpecialFieldInCloseCombat() {\r\n        return specialFieldInCloseCombat;\r\n    }\r\n\r\n    public SpecialCard getSpecialFieldInSiege() {\r\n        return specialFieldInSiege;\r\n    }\r\n\r\n    public SpecialCard getSpecialFieldInRanged() {\r\n        return specialFieldInRanged;\r\n    }\r\n\r\n    public void addCardToCommonCardsInDeck(CommonCard commonCard) {\r\n        commonCardsInDeck.add(commonCard);\r\n    }\r\n\r\n    public void addCardToCommonCardsInDiscard(CommonCard commonCard) {\r\n        commonCardsInDiscard.add(commonCard);\r\n    }\r\n\r\n    public void addCardToCommonCardsInBattleField(CommonCard commonCard) {\r\n        commonCardInBattleField.add(commonCard);\r\n    }\r\n\r\n    public void addCardToSpecialCardsInDeck(SpecialCard specialCard) {\r\n        specialCardsInDeck.add(specialCard);\r\n    }\r\n\r\n    public void addCardToSpecialCardsInDiscard(SpecialCard specialCard) {\r\n        specialCardsDiscard.add(specialCard);\r\n    }\r\n\r\n    public void addCardToSpecialCardsInBattleField(SpecialCard specialCard) {\r\n        specialCardsBattleField.add(specialCard);\r\n    }\r\n\r\n    public void addCardToCommonCardsInCloseCombat(CommonCard commonCard) {\r\n        closeCombatBattleField.add(commonCard);\r\n    }\r\n\r\n    public void addCardToCommonCardsInSiege(CommonCard commonCard) {\r\n        siegeIsPlayed.add(commonCard);\r\n    }\r\n\r\n    public void addCardToCommonCardsInRanged(CommonCard commonCard) {\r\n        closeCombatBattleField.add(commonCard);\r\n    }\r\n\r\n    public void removeCardToCommonCardsInDeck(CommonCard commonCard) {\r\n\r\n    }\r\n\r\n    public void removeCardToCommonCardsInDiscard(CommonCard commonCard) {\r\n\r\n    }\r\n\r\n    public void removeCardToCommonCardsInBattleField(CommonCard commonCard) {\r\n\r\n    }\r\n\r\n    public void removeCardToSpecialCardsInDeck(SpecialCard specialCard) {\r\n\r\n    }\r\n\r\n    public void removeCardToSpecialCardsInDiscard(SpecialCard specialCard) {\r\n\r\n    }\r\n\r\n    public void removeCardToSpecialCardsInBattleField(SpecialCard specialCard) {\r\n\r\n    }\r\n\r\n    public void removeCardToCommonCardsInCloseCombat(CommonCard commonCard) {\r\n\r\n    }\r\n\r\n    public void removeCardToCommonCardsInSiege(CommonCard commonCard) {\r\n\r\n    }\r\n\r\n    public void removeCardToCommonCardsInRanged(CommonCard commonCard) {\r\n\r\n    }\r\n\r\n    public double getMaxScore() {\r\n        return maxScore;\r\n    }\r\n\r\n    public void setMaxScore(double maxScore) {\r\n        this.maxScore = maxScore;\r\n    }\r\n\r\n    public int getLoses() {\r\n        return loses;\r\n    }\r\n\r\n    public void setLoses(int loses) {\r\n        this.loses = loses;\r\n    }\r\n\r\n    public int getDraws() {\r\n        return draws;\r\n    }\r\n\r\n    public void setDraws(int draws) {\r\n        this.draws = draws;\r\n    }\r\n\r\n    public int getWins() {\r\n        return wins;\r\n    }\r\n\r\n    public void setWins(int wins) {\r\n        this.wins = wins;\r\n    }\r\n\r\n    public int getGamesPlayed() {\r\n        return gamesPlayed;\r\n    }\r\n\r\n    public void setGamesPlayed(int gamesPlayed) {\r\n        this.gamesPlayed = gamesPlayed;\r\n    }\r\n\r\n    public int getRank() {\r\n        allUsers.sort(new Comparator<User>() {\r\n            @Override\r\n            public int compare(User o1, User o2) {\r\n                return o2.getRank() - o1.getRank();\r\n            }\r\n        });\r\n        return allUsers.indexOf(this);\r\n    }\r\n\r\n    public void saveUserData(String filePath) {\r\n        Gson gson = new Gson();\r\n        try (FileWriter writer = new FileWriter(filePath)) {\r\n            gson.toJson(this, writer);\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public static User loadUserData(String filePath) {\r\n        Gson gson = new Gson();\r\n        try (FileReader reader = new FileReader(filePath)) {\r\n            return gson.fromJson(reader, User.class);\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n            return null;\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Sample/Model/User.java b/src/main/java/Sample/Model/User.java
--- a/src/main/java/Sample/Model/User.java	(revision f9bb180293b1f8ec200f5452f43070a0516a10ba)
+++ b/src/main/java/Sample/Model/User.java	(date 1719693133232)
@@ -24,6 +24,9 @@
     private int draws;
     private int loses;
     private double maxScore;
+    private User competitor;
+    private GameBattleField lastGameBattleField;
+    private final ArrayList<GameBattleField> allGameBattleField = new ArrayList<>();
     private static final ArrayList<User> allUsers = new ArrayList<>();
     private static User userLoginIn;
     private HashMap<String, String> securityQuestionsAndAnswers = new HashMap<>();
@@ -33,16 +36,6 @@
 
     private final ArrayList<CommonCard> commonCardsInDeck = new ArrayList<>();
     private final ArrayList<SpecialCard> specialCardsInDeck = new ArrayList<>();
-    private final ArrayList<CommonCard> commonCardInBattleField = new ArrayList<>();
-    private final ArrayList<SpecialCard> specialCardsBattleField = new ArrayList<>();
-    private final ArrayList<CommonCard> closeCombatBattleField = new ArrayList<>();
-    private final ArrayList<CommonCard> commonCardsInDiscard = new ArrayList<>();
-    private final ArrayList<SpecialCard> specialCardsDiscard = new ArrayList<>();
-    private final ArrayList<CommonCard> siegeIsPlayed = new ArrayList<>();
-    private final ArrayList<CommonCard> rangedIsPlayed = new ArrayList<>();
-    private SpecialCard specialFieldInCloseCombat = null;
-    private SpecialCard specialFieldInSiege = null;
-    private SpecialCard specialFieldInRanged = null;
 
     public User(String username, String password, String email, String nickname) {
         this.username = username;
@@ -82,10 +75,6 @@
         return factionLeader;
     }
 
-    public ArrayList<SpecialCard> getSpecialCardsBattleField() {
-        return specialCardsBattleField;
-    }
-
     public void setUsername(String username) {
         this.username = username;
     }
@@ -131,18 +120,6 @@
         this.factionSelected = factionSelected;
     }
 
-    public void setSpecialFieldInCloseCombat(SpecialCard specialFieldInCloseCombat) {
-        this.specialFieldInCloseCombat = specialFieldInCloseCombat;
-    }
-
-    public void setSpecialFieldInSiege(SpecialCard specialFieldInSiege) {
-        this.specialFieldInSiege = specialFieldInSiege;
-    }
-
-    public void setSpecialFieldInRanged(SpecialCard specialFieldInRanged) {
-        this.specialFieldInRanged = specialFieldInRanged;
-    }
-
     public Faction getFactionSelected() {
         return factionSelected;
     }
@@ -155,118 +132,22 @@
         return specialCardsInDeck;
     }
 
-    public ArrayList<CommonCard> getCommonCardInBattleField() {
-        return commonCardInBattleField;
-    }
-
-    public ArrayList<SpecialCard> getSpecialCardsCanPlay() {
-        return specialCardsBattleField;
-    }
-
-    public ArrayList<CommonCard> getCommonCardsInDiscard() {
-        return commonCardsInDiscard;
-    }
-
-    public ArrayList<SpecialCard> getSpecialCardsDiscard() {
-        return specialCardsDiscard;
-    }
-
-    public ArrayList<CommonCard> getCloseCombatBattleField() {
-        return closeCombatBattleField;
-    }
-
-    public ArrayList<CommonCard> getSiegeIsPlayed() {
-        return siegeIsPlayed;
-    }
-
-    public ArrayList<CommonCard> getRangedIsPlayed() {
-        return rangedIsPlayed;
-    }
-
-    public SpecialCard getSpecialFieldInCloseCombat() {
-        return specialFieldInCloseCombat;
-    }
-
-    public SpecialCard getSpecialFieldInSiege() {
-        return specialFieldInSiege;
-    }
-
-    public SpecialCard getSpecialFieldInRanged() {
-        return specialFieldInRanged;
-    }
-
     public void addCardToCommonCardsInDeck(CommonCard commonCard) {
         commonCardsInDeck.add(commonCard);
     }
 
-    public void addCardToCommonCardsInDiscard(CommonCard commonCard) {
-        commonCardsInDiscard.add(commonCard);
-    }
-
-    public void addCardToCommonCardsInBattleField(CommonCard commonCard) {
-        commonCardInBattleField.add(commonCard);
-    }
-
     public void addCardToSpecialCardsInDeck(SpecialCard specialCard) {
         specialCardsInDeck.add(specialCard);
     }
 
-    public void addCardToSpecialCardsInDiscard(SpecialCard specialCard) {
-        specialCardsDiscard.add(specialCard);
-    }
-
-    public void addCardToSpecialCardsInBattleField(SpecialCard specialCard) {
-        specialCardsBattleField.add(specialCard);
-    }
-
-    public void addCardToCommonCardsInCloseCombat(CommonCard commonCard) {
-        closeCombatBattleField.add(commonCard);
-    }
-
-    public void addCardToCommonCardsInSiege(CommonCard commonCard) {
-        siegeIsPlayed.add(commonCard);
-    }
-
-    public void addCardToCommonCardsInRanged(CommonCard commonCard) {
-        closeCombatBattleField.add(commonCard);
-    }
-
     public void removeCardToCommonCardsInDeck(CommonCard commonCard) {
 
     }
 
-    public void removeCardToCommonCardsInDiscard(CommonCard commonCard) {
-
-    }
-
-    public void removeCardToCommonCardsInBattleField(CommonCard commonCard) {
-
-    }
-
     public void removeCardToSpecialCardsInDeck(SpecialCard specialCard) {
 
     }
 
-    public void removeCardToSpecialCardsInDiscard(SpecialCard specialCard) {
-
-    }
-
-    public void removeCardToSpecialCardsInBattleField(SpecialCard specialCard) {
-
-    }
-
-    public void removeCardToCommonCardsInCloseCombat(CommonCard commonCard) {
-
-    }
-
-    public void removeCardToCommonCardsInSiege(CommonCard commonCard) {
-
-    }
-
-    public void removeCardToCommonCardsInRanged(CommonCard commonCard) {
-
-    }
-
     public double getMaxScore() {
         return maxScore;
     }
@@ -317,6 +198,30 @@
         return allUsers.indexOf(this);
     }
 
+    public User getCompetitor() {
+        return competitor;
+    }
+
+    public void setCompetitor(User competitor) {
+        this.competitor = competitor;
+    }
+
+    public GameBattleField getLastGameBattleField() {
+        return lastGameBattleField;
+    }
+
+    public void setLastGameBattleField(GameBattleField lastGameBattleField) {
+        this.lastGameBattleField = lastGameBattleField;
+    }
+
+    public ArrayList<GameBattleField> getAllGameBattleField() {
+        return allGameBattleField;
+    }
+
+    public void addToAllGameBattleField(GameBattleField gameBattleField) {
+        allGameBattleField.add(gameBattleField);
+    }
+
     public void saveUserData(String filePath) {
         Gson gson = new Gson();
         try (FileWriter writer = new FileWriter(filePath)) {
Index: src/main/java/Sample/Controller/LeaderController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Sample.Controller;\r\n\r\nimport Sample.CardEnums.Faction;\r\nimport Sample.CardEnums.Leader;\r\nimport Sample.Model.User;\r\nimport Sample.View.FactionMenu;\r\nimport Sample.View.LoginMenu;\r\nimport Sample.View.MainMenu;\r\nimport javafx.animation.KeyFrame;\r\nimport javafx.animation.ScaleTransition;\r\nimport javafx.animation.Timeline;\r\nimport javafx.animation.TranslateTransition;\r\nimport javafx.fxml.FXML;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.image.Image;\r\nimport javafx.scene.image.ImageView;\r\nimport javafx.scene.input.MouseEvent;\r\nimport javafx.scene.layout.*;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.util.Duration;\r\n\r\nimport java.util.Objects;\r\n\r\npublic class LeaderController {\r\n    @FXML\r\n    private Label ability;\r\n    @FXML\r\n    private Label cardName;\r\n    @FXML\r\n    private Label faction;\r\n    @FXML\r\n    private Label sentence;\r\n    @FXML\r\n    private ImageView factionImage;\r\n    @FXML\r\n    private StackPane border1;\r\n    @FXML\r\n    private ImageView image1;\r\n    @FXML\r\n    private StackPane border2;\r\n    @FXML\r\n    private ImageView image2;\r\n    @FXML\r\n    private StackPane border3;\r\n    @FXML\r\n    private ImageView image3;\r\n    @FXML\r\n    private StackPane border4;\r\n    @FXML\r\n    private ImageView image4;\r\n    @FXML\r\n    private StackPane border5;\r\n    @FXML\r\n    private ImageView image5;\r\n    private TranslateTransition translateTransition;\r\n    private ScaleTransition scaleTransition;\r\n    private Timeline timeline;\r\n\r\n    public void initialize() {\r\n        setWidthAndHeight();\r\n        User user = User.getUserLoginIn();\r\n\r\n        cardName.setText(user.getFactionLeader().getName());\r\n        ability.setText(user.getFactionLeader().getAbility());\r\n\r\n        Image factionMonster = new Image(Objects.requireNonNull(LoginMenu.class.getResourceAsStream(\"Images/Icons/deck_shield_monsters.png\")));\r\n        Image factionNilfgaardian = new Image(Objects.requireNonNull(LoginMenu.class.getResourceAsStream(\"Images/Icons/deck_shield_nilfgaard.png\")));\r\n        Image factionNorthern = new Image(Objects.requireNonNull(LoginMenu.class.getResourceAsStream(\"Images/Icons/deck_shield_realms.png\")));\r\n        Image factionScoiatael = new Image(Objects.requireNonNull(LoginMenu.class.getResourceAsStream(\"Images/Icons/deck_shield_scoiatael.png\")));\r\n        Image factionSkellige = new Image(Objects.requireNonNull(LoginMenu.class.getResourceAsStream(\"Images/Icons/deck_shield_skellige.png\")));\r\n\r\n        Image monsterLeader1 = new Image(Objects.requireNonNull(LoginMenu.class.getResourceAsStream(\"Images/CardImages/monsters_eredin_bronze.jpg\")));\r\n        Image monsterLeader2 = new Image(Objects.requireNonNull(LoginMenu.class.getResourceAsStream(\"Images/CardImages/monsters_eredin_copper.jpg\")));\r\n        Image monsterLeader3 = new Image(Objects.requireNonNull(LoginMenu.class.getResourceAsStream(\"Images/CardImages/monsters_eredin_gold.jpg\")));\r\n        Image monsterLeader4 = new Image(Objects.requireNonNull(LoginMenu.class.getResourceAsStream(\"Images/CardImages/monsters_eredin_silver.jpg\")));\r\n        Image monsterLeader5 = new Image(Objects.requireNonNull(LoginMenu.class.getResourceAsStream(\"Images/CardImages/monsters_eredin_the_treacherous.jpg\")));\r\n\r\n        Image nilfLeader1 = new Image(Objects.requireNonNull(LoginMenu.class.getResourceAsStream(\"Images/CardImages/nilfgaard_emhyr_bronze.jpg\")));\r\n        Image nilfLeader2 = new Image(Objects.requireNonNull(LoginMenu.class.getResourceAsStream(\"Images/CardImages/nilfgaard_emhyr_copper.jpg\")));\r\n        Image nilfLeader3 = new Image(Objects.requireNonNull(LoginMenu.class.getResourceAsStream(\"Images/CardImages/nilfgaard_emhyr_gold.jpg\")));\r\n        Image nilfLeader4 = new Image(Objects.requireNonNull(LoginMenu.class.getResourceAsStream(\"Images/CardImages/nilfgaard_emhyr_silver.jpg\")));\r\n        Image nilfLeader5 = new Image(Objects.requireNonNull(LoginMenu.class.getResourceAsStream(\"Images/CardImages/nilfgaard_emhyr_invader_of_the_north.jpg\")));\r\n\r\n        Image northernLeader1 = new Image(Objects.requireNonNull(LoginMenu.class.getResourceAsStream(\"Images/CardImages/realms_foltest_bronze.jpg\")));\r\n        Image northernLeader2 = new Image(Objects.requireNonNull(LoginMenu.class.getResourceAsStream(\"Images/CardImages/realms_foltest_copper.jpg\")));\r\n        Image northernLeader3 = new Image(Objects.requireNonNull(LoginMenu.class.getResourceAsStream(\"Images/CardImages/realms_foltest_gold.jpg\")));\r\n        Image northernLeader4 = new Image(Objects.requireNonNull(LoginMenu.class.getResourceAsStream(\"Images/CardImages/realms_foltest_silver.jpg\")));\r\n        Image northernLeader5 = new Image(Objects.requireNonNull(LoginMenu.class.getResourceAsStream(\"Images/CardImages/realms_foltest_son_of_medell.jpg\")));\r\n\r\n        Image scoiataelLeader1 = new Image(Objects.requireNonNull(LoginMenu.class.getResourceAsStream(\"Images/CardImages/scoiatael_francesca_bronze.jpg\")));\r\n        Image scoiataelLeader2 = new Image(Objects.requireNonNull(LoginMenu.class.getResourceAsStream(\"Images/CardImages/scoiatael_francesca_copper.jpg\")));\r\n        Image scoiataelLeader3 = new Image(Objects.requireNonNull(LoginMenu.class.getResourceAsStream(\"Images/CardImages/scoiatael_francesca_gold.jpg\")));\r\n        Image scoiataelLeader4 = new Image(Objects.requireNonNull(LoginMenu.class.getResourceAsStream(\"Images/CardImages/scoiatael_francesca_silver.jpg\")));\r\n        Image scoiataelLeader5 = new Image(Objects.requireNonNull(LoginMenu.class.getResourceAsStream(\"Images/CardImages/scoiatael_francesca_hope_of_the_aen_seidhe.jpg\")));\r\n\r\n        Image skelligeLeader2 = new Image(Objects.requireNonNull(LoginMenu.class.getResourceAsStream(\"Images/CardImages/skellige_crach_an_craite.jpg\")));\r\n        Image skelligeLeader4 = new Image(Objects.requireNonNull(LoginMenu.class.getResourceAsStream(\"Images/CardImages/skellige_king_bran.jpg\")));\r\n\r\n        if (user.getFactionSelected().equals(Faction.Monsters)) {\r\n            sentence.setText(Faction.Monsters.getAbility());\r\n            faction.setText(Faction.Monsters.getFactionName());\r\n            factionImage.setImage(factionMonster);\r\n            image1.setImage(monsterLeader1);\r\n            image2.setImage(monsterLeader2);\r\n            image3.setImage(monsterLeader3);\r\n            image4.setImage(monsterLeader4);\r\n            image5.setImage(monsterLeader5);\r\n        } else if (user.getFactionSelected().equals(Faction.Nilfgaard)) {\r\n            sentence.setText(Faction.Nilfgaard.getAbility());\r\n            faction.setText(Faction.Nilfgaard.getFactionName());\r\n            factionImage.setImage(factionNilfgaardian);\r\n            image1.setImage(nilfLeader1);\r\n            image2.setImage(nilfLeader2);\r\n            image3.setImage(nilfLeader3);\r\n            image4.setImage(nilfLeader4);\r\n            image5.setImage(nilfLeader5);\r\n        } else if (user.getFactionSelected().equals(Faction.NorthernRealms)) {\r\n            sentence.setText(Faction.NorthernRealms.getAbility());\r\n            faction.setText(Faction.NorthernRealms.getFactionName());\r\n            factionImage.setImage(factionNorthern);\r\n            image1.setImage(northernLeader1);\r\n            image2.setImage(northernLeader2);\r\n            image3.setImage(northernLeader3);\r\n            image4.setImage(northernLeader4);\r\n            image5.setImage(northernLeader5);\r\n        } else if (user.getFactionSelected().equals(Faction.Scoiatael)) {\r\n            sentence.setText(Faction.Scoiatael.getAbility());\r\n            faction.setText(Faction.Scoiatael.getFactionName());\r\n            factionImage.setImage(factionScoiatael);\r\n            image1.setImage(scoiataelLeader1);\r\n            image2.setImage(scoiataelLeader2);\r\n            image3.setImage(scoiataelLeader3);\r\n            image4.setImage(scoiataelLeader4);\r\n            image5.setImage(scoiataelLeader5);\r\n        } else if (user.getFactionSelected().equals(Faction.Skellige)) {\r\n            sentence.setText(Faction.Skellige.getAbility());\r\n            faction.setText(Faction.Skellige.getFactionName());\r\n            factionImage.setImage(factionSkellige);\r\n            image2.setImage(skelligeLeader2);\r\n            image4.setImage(skelligeLeader4);\r\n        }\r\n        timeline = new Timeline(\r\n                new KeyFrame(Duration.seconds(0.01), event -> checkFactionLeader())\r\n        );\r\n        timeline.setCycleCount(Timeline.INDEFINITE);\r\n        timeline.play();\r\n    }\r\n\r\n    private void checkFactionLeader() {\r\n        User user = User.getUserLoginIn();\r\n        if (user.getFactionSelected().equals(Faction.Monsters)) {\r\n            if (user.getFactionLeader().equals(Leader.KingOfTheWildHunt)) {\r\n                addBorder(1);\r\n            } else if (user.getFactionLeader().equals(Leader.CommanderOfTheRedRiders)) {\r\n                addBorder(2);\r\n            } else if (user.getFactionLeader().equals(Leader.DestroyerOfWorlds)) {\r\n                addBorder(3);\r\n            } else if (user.getFactionLeader().equals(Leader.BringerOfDeath)) {\r\n                addBorder(4);\r\n            } else if (user.getFactionLeader().equals(Leader.TheTreacherous)) {\r\n                addBorder(5);\r\n            }\r\n        } else if (user.getFactionSelected().equals(Faction.Nilfgaard)) {\r\n            if (user.getFactionLeader().equals(Leader.EmperorOfNilfgaard)) {\r\n                addBorder(1);\r\n            } else if (user.getFactionLeader().equals(Leader.HisImperialMajesty)) {\r\n                addBorder(2);\r\n            } else if (user.getFactionLeader().equals(Leader.TheRelentless)) {\r\n                addBorder(3);\r\n            } else if (user.getFactionLeader().equals(Leader.WhiteFlame)) {\r\n                addBorder(4);\r\n            } else if (user.getFactionLeader().equals(Leader.InvaderOfTheNorth)) {\r\n                addBorder(5);\r\n            }\r\n        } else if (user.getFactionSelected().equals(Faction.NorthernRealms)) {\r\n            if (user.getFactionLeader().equals(Leader.LordCommanderOfTheNorth)) {\r\n                addBorder(1);\r\n            } else if (user.getFactionLeader().equals(Leader.KingOfTemeria)) {\r\n                addBorder(2);\r\n            } else if (user.getFactionLeader().equals(Leader.SteelForged)) {\r\n                addBorder(3);\r\n            } else if (user.getFactionLeader().equals(Leader.SiegeMaster)) {\r\n                addBorder(4);\r\n            } else if (user.getFactionLeader().equals(Leader.SonOfMedell)) {\r\n                addBorder(5);\r\n            }\r\n        } else if (user.getFactionSelected().equals(Faction.Scoiatael)) {\r\n            if (user.getFactionLeader().equals(Leader.PurebloodElf)) {\r\n                addBorder(1);\r\n            } else if (user.getFactionLeader().equals(Leader.DaisyOfTheValley)) {\r\n                addBorder(2);\r\n            } else if (user.getFactionLeader().equals(Leader.TheBeautiful)) {\r\n                addBorder(3);\r\n            } else if (user.getFactionLeader().equals(Leader.QueenOfDolBlathanna)) {\r\n                addBorder(4);\r\n            } else if (user.getFactionLeader().equals(Leader.HopeOfTheAenSeidhe)) {\r\n                addBorder(5);\r\n            }\r\n        } else if (user.getFactionSelected().equals(Faction.Skellige)) {\r\n            if (user.getFactionLeader().equals(Leader.CrachAnCraite)) {\r\n                addBorder(2);\r\n            } else if (user.getFactionLeader().equals(Leader.KingBran)) {\r\n                addBorder(4);\r\n            }\r\n        }\r\n    }\r\n\r\n    private void addBorder(int i) {\r\n        BorderStroke borderStroke = new BorderStroke(Color.YELLOW, BorderStrokeStyle.SOLID, CornerRadii.EMPTY, new BorderWidths(8));\r\n        Border border = new Border(borderStroke);\r\n        if (i == 1) {\r\n            border1.setBorder(border);\r\n            border2.setBorder(null);\r\n            border3.setBorder(null);\r\n            border4.setBorder(null);\r\n            border5.setBorder(null);\r\n        } else if (i == 2) {\r\n            border1.setBorder(null);\r\n            border2.setBorder(border);\r\n            border3.setBorder(null);\r\n            border4.setBorder(null);\r\n            border5.setBorder(null);\r\n        } else if (i == 3) {\r\n            border1.setBorder(null);\r\n            border2.setBorder(null);\r\n            border3.setBorder(border);\r\n            border4.setBorder(null);\r\n            border5.setBorder(null);\r\n        } else if (i == 4) {\r\n            border1.setBorder(null);\r\n            border2.setBorder(null);\r\n            border3.setBorder(null);\r\n            border4.setBorder(border);\r\n            border5.setBorder(null);\r\n        } else if (i == 5) {\r\n            border1.setBorder(null);\r\n            border2.setBorder(null);\r\n            border3.setBorder(null);\r\n            border4.setBorder(null);\r\n            border5.setBorder(border);\r\n        } else if (i == 0) {\r\n            border1.setBorder(null);\r\n            border2.setBorder(null);\r\n            border3.setBorder(null);\r\n            border4.setBorder(null);\r\n            border5.setBorder(null);\r\n        }\r\n    }\r\n\r\n    private void setWidthAndHeight() {\r\n        image1.setFitHeight(260);\r\n        image1.setFitWidth(130);\r\n        image2.setFitHeight(260);\r\n        image2.setFitWidth(130);\r\n        image3.setFitHeight(260);\r\n        image3.setFitWidth(130);\r\n        image4.setFitHeight(260);\r\n        image4.setFitWidth(130);\r\n        image5.setFitHeight(260);\r\n        image5.setFitWidth(130);\r\n    }\r\n\r\n    public void changeFaction() {\r\n        timeline.stop();\r\n        FactionMenu factionMenu = new FactionMenu();\r\n        try {\r\n            factionMenu.start(ApplicationController.getStage());\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n\r\n    public void focusOnImage(MouseEvent mouseEvent) {\r\n        User user = User.getUserLoginIn();\r\n        ImageView imageView = (ImageView) mouseEvent.getSource();\r\n        String id = imageView.getId();\r\n        switch (id) {\r\n            case \"image1\" -> {\r\n                if (user.getFactionSelected().equals(Faction.Monsters)) {\r\n                    cardName.setText(Leader.KingOfTheWildHunt.getName());\r\n                    ability.setText(Leader.KingOfTheWildHunt.getAbility());\r\n                } else if (user.getFactionSelected().equals(Faction.Nilfgaard)) {\r\n                    cardName.setText(Leader.EmperorOfNilfgaard.getName());\r\n                    ability.setText(Leader.EmperorOfNilfgaard.getAbility());\r\n                } else if (user.getFactionSelected().equals(Faction.NorthernRealms)) {\r\n                    cardName.setText(Leader.LordCommanderOfTheNorth.getName());\r\n                    ability.setText(Leader.LordCommanderOfTheNorth.getAbility());\r\n                } else if (user.getFactionSelected().equals(Faction.Scoiatael)) {\r\n                    cardName.setText(Leader.PurebloodElf.getName());\r\n                    ability.setText(Leader.PurebloodElf.getAbility());\r\n                }\r\n            }\r\n            case \"image2\" -> {\r\n                if (user.getFactionSelected().equals(Faction.Monsters)) {\r\n                    cardName.setText(Leader.CommanderOfTheRedRiders.getName());\r\n                    ability.setText(Leader.CommanderOfTheRedRiders.getAbility());\r\n                } else if (user.getFactionSelected().equals(Faction.Nilfgaard)) {\r\n                    cardName.setText(Leader.HisImperialMajesty.getName());\r\n                    ability.setText(Leader.HisImperialMajesty.getAbility());\r\n                } else if (user.getFactionSelected().equals(Faction.NorthernRealms)) {\r\n                    cardName.setText(Leader.KingOfTemeria.getName());\r\n                    ability.setText(Leader.KingOfTemeria.getAbility());\r\n                } else if (user.getFactionSelected().equals(Faction.Scoiatael)) {\r\n                    cardName.setText(Leader.DaisyOfTheValley.getName());\r\n                    ability.setText(Leader.DaisyOfTheValley.getAbility());\r\n                } else if (user.getFactionSelected().equals(Faction.Skellige)) {\r\n                    cardName.setText(Leader.CrachAnCraite.getName());\r\n                    ability.setText(Leader.CrachAnCraite.getAbility());\r\n                }\r\n            }\r\n            case \"image3\" -> {\r\n                if (user.getFactionSelected().equals(Faction.Monsters)) {\r\n                    cardName.setText(Leader.DestroyerOfWorlds.getName());\r\n                    ability.setText(Leader.DestroyerOfWorlds.getAbility());\r\n                }\r\n                else if (user.getFactionSelected().equals(Faction.Nilfgaard)) {\r\n                    cardName.setText(Leader.TheRelentless.getName());\r\n                    ability.setText(Leader.TheRelentless.getAbility());\r\n                }\r\n                else if (user.getFactionSelected().equals(Faction.NorthernRealms)) {\r\n                    cardName.setText(Leader.SteelForged.getName());\r\n                    ability.setText(Leader.SteelForged.getAbility());\r\n                }\r\n                else if (user.getFactionSelected().equals(Faction.Scoiatael)) {\r\n                    cardName.setText(Leader.TheBeautiful.getName());\r\n                    ability.setText(Leader.TheBeautiful.getAbility());\r\n                }\r\n            }\r\n            case \"image4\" -> {\r\n                if (user.getFactionSelected().equals(Faction.Monsters)) {\r\n                    cardName.setText(Leader.BringerOfDeath.getName());\r\n                    ability.setText(Leader.BringerOfDeath.getAbility());\r\n                }\r\n                else if (user.getFactionSelected().equals(Faction.Nilfgaard)) {\r\n                    cardName.setText(Leader.WhiteFlame.getName());\r\n                    ability.setText(Leader.WhiteFlame.getAbility());\r\n                }\r\n                else if (user.getFactionSelected().equals(Faction.NorthernRealms)) {\r\n                    cardName.setText(Leader.SiegeMaster.getName());\r\n                    ability.setText(Leader.SiegeMaster.getAbility());\r\n                }\r\n                else if (user.getFactionSelected().equals(Faction.Scoiatael)) {\r\n                    cardName.setText(Leader.QueenOfDolBlathanna.getName());\r\n                    ability.setText(Leader.QueenOfDolBlathanna.getAbility());\r\n                }\r\n                else if (user.getFactionSelected().equals(Faction.Skellige)) {\r\n                    cardName.setText(Leader.KingBran.getName());\r\n                    ability.setText(Leader.KingBran.getAbility());\r\n                }\r\n            }\r\n            case \"image5\" -> {\r\n                if (user.getFactionSelected().equals(Faction.Monsters)) {\r\n                    cardName.setText(Leader.TheTreacherous.getName());\r\n                    ability.setText(Leader.TheTreacherous.getAbility());\r\n                }\r\n                else if (user.getFactionSelected().equals(Faction.Nilfgaard)) {\r\n                    cardName.setText(Leader.InvaderOfTheNorth.getName());\r\n                    ability.setText(Leader.InvaderOfTheNorth.getAbility());\r\n                }\r\n                else if (user.getFactionSelected().equals(Faction.NorthernRealms)) {\r\n                    cardName.setText(Leader.SonOfMedell.getName());\r\n                    ability.setText(Leader.SonOfMedell.getAbility());\r\n                }\r\n                else if (user.getFactionSelected().equals(Faction.Scoiatael)) {\r\n                    cardName.setText(Leader.HopeOfTheAenSeidhe.getName());\r\n                    ability.setText(Leader.HopeOfTheAenSeidhe.getAbility());\r\n                }\r\n            }\r\n        }\r\n\r\n        scaleTransition = new ScaleTransition(Duration.millis(500), imageView);\r\n        scaleTransition.setToX(1.2);\r\n        scaleTransition.setToY(1.2);\r\n        scaleTransition.setCycleCount(1);\r\n        scaleTransition.setAutoReverse(true);\r\n        scaleTransition.play();\r\n\r\n        translateTransition = new TranslateTransition(Duration.millis(500), imageView);\r\n        translateTransition.setToX((imageView.getFitWidth() - imageView.getLayoutBounds().getWidth()) / 2);\r\n        translateTransition.setToY((imageView.getFitHeight() - imageView.getLayoutBounds().getHeight()) / 2 + 50);\r\n        translateTransition.play();\r\n    }\r\n\r\n    public void unFocus(MouseEvent mouseEvent) {\r\n        ImageView imageView = (ImageView) mouseEvent.getSource();\r\n\r\n        cardName.setText(User.getUserLoginIn().getFactionLeader().getName());\r\n        ability.setText(User.getUserLoginIn().getFactionLeader().getAbility());\r\n\r\n        scaleTransition = new ScaleTransition(Duration.millis(500), imageView);\r\n        scaleTransition.setToX(1);\r\n        scaleTransition.setToY(1);\r\n        scaleTransition.setCycleCount(1);\r\n        scaleTransition.setAutoReverse(true);\r\n        scaleTransition.play();\r\n\r\n        translateTransition = new TranslateTransition(Duration.millis(500), imageView);\r\n        translateTransition.setToX(0);\r\n        translateTransition.setToY(0);\r\n        translateTransition.play();\r\n    }\r\n\r\n    public void unFocusAfterChooseLeader(ImageView imageView) {\r\n        cardName.setText(User.getUserLoginIn().getFactionLeader().getName());\r\n        ability.setText(User.getUserLoginIn().getFactionLeader().getAbility());\r\n\r\n        scaleTransition = new ScaleTransition(Duration.millis(500), imageView);\r\n        scaleTransition.setToX(1);\r\n        scaleTransition.setToY(1);\r\n        scaleTransition.setCycleCount(1);\r\n        scaleTransition.setAutoReverse(true);\r\n        scaleTransition.play();\r\n\r\n        translateTransition = new TranslateTransition(Duration.millis(500), imageView);\r\n        translateTransition.setToX(0);\r\n        translateTransition.setToY(0);\r\n        translateTransition.play();\r\n    }\r\n\r\n\r\n    public void changeLeader(MouseEvent mouseEvent) {\r\n        User user = User.getUserLoginIn();\r\n        ImageView source = (ImageView) mouseEvent.getSource();\r\n        String id = source.getId();\r\n\r\n        switch (id) {\r\n            case \"image1\" -> {\r\n                if (user.getFactionSelected().equals(Faction.Monsters)) user.setFactionLeader(Leader.KingOfTheWildHunt);\r\n                else if (user.getFactionSelected().equals(Faction.Nilfgaard))\r\n                    user.setFactionLeader(Leader.EmperorOfNilfgaard);\r\n                else if (user.getFactionSelected().equals(Faction.NorthernRealms))\r\n                    user.setFactionLeader(Leader.LordCommanderOfTheNorth);\r\n                else if (user.getFactionSelected().equals(Faction.Scoiatael))\r\n                    user.setFactionLeader(Leader.PurebloodElf);\r\n                unFocusAfterChooseLeader(image1);\r\n            }\r\n            case \"image2\" -> {\r\n                if (user.getFactionSelected().equals(Faction.Monsters))\r\n                    user.setFactionLeader(Leader.CommanderOfTheRedRiders);\r\n                else if (user.getFactionSelected().equals(Faction.Nilfgaard))\r\n                    user.setFactionLeader(Leader.HisImperialMajesty);\r\n                else if (user.getFactionSelected().equals(Faction.NorthernRealms))\r\n                    user.setFactionLeader(Leader.KingOfTemeria);\r\n                else if (user.getFactionSelected().equals(Faction.Scoiatael))\r\n                    user.setFactionLeader(Leader.DaisyOfTheValley);\r\n                else if (user.getFactionSelected().equals(Faction.Skellige))\r\n                    user.setFactionLeader(Leader.CrachAnCraite);\r\n                unFocusAfterChooseLeader(image2);\r\n            }\r\n            case \"image3\" -> {\r\n                if (user.getFactionSelected().equals(Faction.Monsters)) user.setFactionLeader(Leader.DestroyerOfWorlds);\r\n                else if (user.getFactionSelected().equals(Faction.Nilfgaard))\r\n                    user.setFactionLeader(Leader.TheRelentless);\r\n                else if (user.getFactionSelected().equals(Faction.NorthernRealms))\r\n                    user.setFactionLeader(Leader.SteelForged);\r\n                else if (user.getFactionSelected().equals(Faction.Scoiatael))\r\n                    user.setFactionLeader(Leader.TheBeautiful);\r\n                unFocusAfterChooseLeader(image3);\r\n            }\r\n            case \"image4\" -> {\r\n                if (user.getFactionSelected().equals(Faction.Monsters)) user.setFactionLeader(Leader.BringerOfDeath);\r\n                else if (user.getFactionSelected().equals(Faction.Nilfgaard)) user.setFactionLeader(Leader.WhiteFlame);\r\n                else if (user.getFactionSelected().equals(Faction.NorthernRealms))\r\n                    user.setFactionLeader(Leader.SiegeMaster);\r\n                else if (user.getFactionSelected().equals(Faction.Scoiatael))\r\n                    user.setFactionLeader(Leader.QueenOfDolBlathanna);\r\n                else if (user.getFactionSelected().equals(Faction.Skellige)) user.setFactionLeader(Leader.KingBran);\r\n                unFocusAfterChooseLeader(image4);\r\n            }\r\n            case \"image5\" -> {\r\n                if (user.getFactionSelected().equals(Faction.Monsters)) user.setFactionLeader(Leader.TheTreacherous);\r\n                else if (user.getFactionSelected().equals(Faction.Nilfgaard))\r\n                    user.setFactionLeader(Leader.InvaderOfTheNorth);\r\n                else if (user.getFactionSelected().equals(Faction.NorthernRealms))\r\n                    user.setFactionLeader(Leader.SonOfMedell);\r\n                else if (user.getFactionSelected().equals(Faction.Scoiatael))\r\n                    user.setFactionLeader(Leader.HopeOfTheAenSeidhe);\r\n                unFocusAfterChooseLeader(image5);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    public void backToMainMenu() throws Exception {\r\n        timeline.stop();\r\n        MainMenu mainMenu = new MainMenu();\r\n        mainMenu.start(ApplicationController.getStage());\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Sample/Controller/LeaderController.java b/src/main/java/Sample/Controller/LeaderController.java
--- a/src/main/java/Sample/Controller/LeaderController.java	(revision f9bb180293b1f8ec200f5452f43070a0516a10ba)
+++ b/src/main/java/Sample/Controller/LeaderController.java	(date 1719693133228)
@@ -2,8 +2,10 @@
 
 import Sample.CardEnums.Faction;
 import Sample.CardEnums.Leader;
+import Sample.Model.GameBattleField;
 import Sample.Model.User;
 import Sample.View.FactionMenu;
+import Sample.View.GameMenu;
 import Sample.View.LoginMenu;
 import Sample.View.MainMenu;
 import javafx.animation.KeyFrame;
@@ -11,6 +13,7 @@
 import javafx.animation.Timeline;
 import javafx.animation.TranslateTransition;
 import javafx.fxml.FXML;
+import javafx.scene.control.Alert;
 import javafx.scene.control.Label;
 import javafx.scene.image.Image;
 import javafx.scene.image.ImageView;
@@ -486,5 +489,29 @@
         MainMenu mainMenu = new MainMenu();
         mainMenu.start(ApplicationController.getStage());
     }
+
+    public void goToDeckMenu(MouseEvent mouseEvent) {
+
+    }
+
+    public void goToGame(MouseEvent mouseEvent) throws Exception {
+        if (User.getUserLoginIn().getCommonCardsInDeck().size() < 22 || User.getUserLoginIn().getSpecialCardsInDeck().size() > 10) {
+            Alert alert = new Alert(Alert.AlertType.WARNING);
+            alert.setTitle("Unacceptable deck");
+            alert.setHeaderText("Change your deck via the deck menu");
+            alert.setContentText("This deck is unacceptable for entry into the game");
+            alert.showAndWait();
+            return;
+        }
+        User user1 = User.getUserLoginIn().getCompetitor();
+        User user2 = User.getUserLoginIn();
+        GameBattleField gameBattleField = new GameBattleField(user1, user2);
+        user1.addToAllGameBattleField(gameBattleField);
+        user2.addToAllGameBattleField(gameBattleField);
+        user1.setLastGameBattleField(gameBattleField);
+        user2.setLastGameBattleField(gameBattleField);
+        GameMenu gameMenu = new GameMenu();
+        gameMenu.start(ApplicationController.getStage());
+    }
 }
 
Index: src/main/java/Sample/Controller/RegisterController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Sample.Controller;\r\n\r\nimport Sample.Enum.Commands;\r\nimport Sample.Model.User;\r\nimport Sample.View.LoginMenu;\r\nimport javafx.fxml.FXML;\r\nimport javafx.scene.control.Alert;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.control.PasswordField;\r\nimport javafx.scene.control.TextField;\r\nimport javafx.scene.image.Image;\r\nimport javafx.scene.image.ImageView;\r\nimport javafx.scene.shape.Circle;\r\n\r\nimport java.security.SecureRandom;\r\nimport java.util.Random;\r\n\r\npublic class RegisterController {\r\n    @FXML\r\n    private ImageView hideOrRevealPasswordImage;\r\n    @FXML\r\n    private Label helloText;\r\n    @FXML\r\n    private TextField username;\r\n    @FXML\r\n    private PasswordField password;\r\n    @FXML\r\n    private TextField showPassword;\r\n    @FXML\r\n    private PasswordField passwordConfirmation;\r\n    @FXML\r\n    private TextField nickname;\r\n    @FXML\r\n    private TextField email;\r\n\r\n    private GameController gameController = new GameController();\r\n    public void initialize() {\r\n        setPasswordShowImage(\"Images/HidePassword.png\");\r\n        username.textProperty().addListener(((observableValue, s, t1) -> {\r\n            helloText.setText(\"Hello \" + username.getText());\r\n        }));\r\n    }\r\n\r\n    private void setPasswordShowImage(String name) {\r\n        Image image = new Image(String.valueOf(LoginMenu.class.getResource(name)));\r\n        hideOrRevealPasswordImage.setImage(image);\r\n        hideOrRevealPasswordImage.setClip(new Circle(15, 15, 15));\r\n    }\r\n\r\n    private int createRandomNumber() {\r\n        int min = 0;\r\n        int max = 10000;\r\n        Random random = new Random();\r\n        return random.nextInt(max - min + 1) + min;\r\n    }\r\n\r\n    public void register() throws Exception {\r\n        if (Commands.UserName.getMatcher(username.getText()) == null) {\r\n            Alert alert = new Alert(Alert.AlertType.WARNING);\r\n            alert.setTitle(\"Invalid username\");\r\n            alert.setHeaderText(\"Check Your username\");\r\n            alert.setContentText(\"Please enter a valid username\");\r\n            alert.showAndWait();\r\n            return;\r\n        }\r\n        if (!showPassword.getText().isEmpty()) password.setText(showPassword.getText());\r\n        if (Commands.Password.getMatcher(password.getText()) == null) {\r\n            showPasswordErrors(password.getText());\r\n            return;\r\n        }\r\n        if (Commands.Nickname.getMatcher(nickname.getText()) == null) {\r\n            Alert alert = new Alert(Alert.AlertType.WARNING);\r\n            alert.setTitle(\"Unacceptable nickname\");\r\n            alert.setHeaderText(\"Check Your nickname\");\r\n            alert.setContentText(\"Please enter a valid nickname\");\r\n            alert.showAndWait();\r\n            return;\r\n        }\r\n        if (Commands.EMAIL.getMatcher(email.getText()) == null) {\r\n            Alert alert = new Alert(Alert.AlertType.WARNING);\r\n            alert.setTitle(\"Unacceptable email\");\r\n            alert.setHeaderText(\"Check Your email\");\r\n            alert.setContentText(\"Please enter a valid email\");\r\n            alert.showAndWait();\r\n            return;\r\n        }\r\n        if (!password.getText().equals(passwordConfirmation.getText())) {\r\n            Alert alert = new Alert(Alert.AlertType.WARNING);\r\n            alert.setTitle(\"Error password\");\r\n            alert.setHeaderText(\"Check Your confirmation password\");\r\n            alert.setContentText(\"Your password does not match with confirmation password\");\r\n            alert.showAndWait();\r\n            password.setText(\"\");\r\n            showPassword.setText(\"\");\r\n            passwordConfirmation.setText(\"\");\r\n            return;\r\n        }\r\n        if (User.getUserByUsername(username.getText()) != null) {\r\n            Alert alert = new Alert(Alert.AlertType.WARNING);\r\n            alert.setTitle(\"Duplicate username\");\r\n            alert.setHeaderText(\"This username is already registered\");\r\n            alert.setContentText(\"Back to login Menu or set new username\");\r\n            alert.showAndWait();\r\n            changeUsername(username.getText());\r\n            return;\r\n        }\r\n        Alert alert = new Alert(Alert.AlertType.INFORMATION);\r\n        alert.setTitle(\"Create account\");\r\n        alert.setHeaderText(\"Account successfully created\");\r\n        alert.show();\r\n        User newUser = new User(username.getText(), password.getText(), email.getText(), nickname.getText());\r\n        // Save user data after registration\r\n        gameController.endGame();\r\n        LoginMenu loginMenu = new LoginMenu();\r\n        loginMenu.start(ApplicationController.getStage());\r\n    }\r\n\r\n    private void changeUsername(String oldUsername) {\r\n        String newUsername = oldUsername + createRandomNumber();\r\n        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);\r\n        alert.setTitle(\"Change username\");\r\n        alert.setHeaderText(\"Your new Username is \" + newUsername);\r\n        alert.setContentText(\"Are you willing to do this?\");\r\n        alert.showAndWait();\r\n        if (alert.getResult().getButtonData().isCancelButton()) return;\r\n        username.setText(newUsername);\r\n        helloText.setText(\"Hello \" + username.getText());\r\n    }\r\n\r\n    private void showPasswordErrors(String password) {\r\n        if (Commands.PasswordLength.getMatcher(password) == null) {\r\n            Alert alert = new Alert(Alert.AlertType.WARNING);\r\n            alert.setTitle(\"Unacceptable password\");\r\n            alert.setHeaderText(\"Your password is too short and must contain at least 8 characters\");\r\n            alert.setContentText(\"Please enter a strong password\");\r\n            alert.showAndWait();\r\n            return;\r\n        }\r\n        if (Commands.PasswordLowerCaseUsed.getMatcher(password) == null) {\r\n            Alert alert = new Alert(Alert.AlertType.WARNING);\r\n            alert.setTitle(\"Unacceptable password\");\r\n            alert.setHeaderText(\"Your password must contain lowercase characters\");\r\n            alert.setContentText(\"Please enter a strong password\");\r\n            alert.showAndWait();\r\n            return;\r\n        }\r\n        if (Commands.PasswordUpperCaseUsed.getMatcher(password) == null) {\r\n            Alert alert = new Alert(Alert.AlertType.WARNING);\r\n            alert.setTitle(\"Unacceptable password\");\r\n            alert.setHeaderText(\"Your password must contain Uppercase characters\");\r\n            alert.setContentText(\"Please enter a strong password\");\r\n            alert.showAndWait();\r\n            return;\r\n        }\r\n        if (Commands.PasswordNumberUsed.getMatcher(password) == null) {\r\n            Alert alert = new Alert(Alert.AlertType.WARNING);\r\n            alert.setTitle(\"Unacceptable password\");\r\n            alert.setHeaderText(\"Your password must contain numbers\");\r\n            alert.setContentText(\"Please enter a strong password\");\r\n            alert.showAndWait();\r\n            return;\r\n        }\r\n        if (Commands.PasswordSpecialCharacterUsed.getMatcher(password) == null) {\r\n            Alert alert = new Alert(Alert.AlertType.WARNING);\r\n            alert.setTitle(\"Unacceptable password\");\r\n            alert.setHeaderText(\"Your password must contain special characters\");\r\n            alert.setContentText(\"Please enter a strong password\");\r\n            alert.showAndWait();\r\n        }\r\n    }\r\n\r\n    public void generateRandomPassword() {\r\n        String allowedCharacters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&\";\r\n        int passwordLength = 10;\r\n\r\n        SecureRandom random = new SecureRandom();\r\n        StringBuilder newPassword = new StringBuilder(passwordLength);\r\n        for (int i = 0; i < passwordLength; i++) {\r\n            int randomIndex = random.nextInt(allowedCharacters.length());\r\n            newPassword.append(allowedCharacters.charAt(randomIndex));\r\n        }\r\n\r\n        if (Commands.Password.getMatcher(newPassword.toString()) != null) {\r\n            Alert alert = new Alert(Alert.AlertType.CONFIRMATION);\r\n            alert.setTitle(\"Random password\");\r\n            alert.setHeaderText(\"Your password is \" + newPassword);\r\n            alert.setContentText(\"Do you want to choose this password?\");\r\n            alert.showAndWait();\r\n            if (alert.getResult().getButtonData().isCancelButton()) return;\r\n            password.setText(newPassword.toString());\r\n            showPassword.setText(newPassword.toString());\r\n        } else {\r\n            generateRandomPassword();\r\n        }\r\n    }\r\n\r\n    public void setPasswordImage() {\r\n        String url = hideOrRevealPasswordImage.getImage().getUrl();\r\n        if (url.contains(\"Hide\")) {\r\n            setPasswordShowImage(\"Images/RevealPassword.png\");\r\n            showPassword.setText(password.getText());\r\n            showPassword.setVisible(true);\r\n            password.setVisible(false);\r\n        } else if (url.contains(\"Reveal\")) {\r\n            setPasswordShowImage(\"Images/HidePassword.png\");\r\n            password.setText(showPassword.getText());\r\n            password.setVisible(true);\r\n            showPassword.setVisible(false);\r\n        }\r\n    }\r\n\r\n    public void backToLoginMenu() throws Exception {\r\n        LoginMenu loginMenu = new LoginMenu();\r\n        loginMenu.start(ApplicationController.getStage());\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Sample/Controller/RegisterController.java b/src/main/java/Sample/Controller/RegisterController.java
--- a/src/main/java/Sample/Controller/RegisterController.java	(revision f9bb180293b1f8ec200f5452f43070a0516a10ba)
+++ b/src/main/java/Sample/Controller/RegisterController.java	(date 1719693133238)
@@ -110,7 +110,7 @@
         alert.show();
         User newUser = new User(username.getText(), password.getText(), email.getText(), nickname.getText());
         // Save user data after registration
-        gameController.endGame();
+//        gameController.endGame();
         LoginMenu loginMenu = new LoginMenu();
         loginMenu.start(ApplicationController.getStage());
     }
Index: src/main/java/Sample/Controller/GameController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Sample.Controller;\r\n\r\nimport Sample.Model.GameBattleField;\r\nimport Sample.Model.User;\r\n\r\nimport java.util.regex.Matcher;\r\n\r\npublic class GameController {\r\n    private GameBattleField gameBattleField;\r\n    private User user;\r\n    private static GameController controller;\r\n\r\n    public static GameController getInstance() {\r\n        if (controller == null) {\r\n            controller = new GameController();\r\n        }\r\n        return controller;\r\n    }\r\n\r\n    public String enterMenu() {\r\n        return null;\r\n    }\r\n\r\n    public String exitMenu() {\r\n        return null;\r\n    }\r\n\r\n    public String showCurrentMenu() {\r\n        return \"GameMenu\";\r\n    }\r\n\r\n    public String showFactions() {\r\n        return null;\r\n    }\r\n\r\n    public String createGame() {\r\n        return null;\r\n    }\r\n\r\n\r\n    public String selectFaction(Matcher matcher) {\r\n        return null;\r\n    }\r\n\r\n    public String showCards() {\r\n        return null;\r\n\r\n    }\r\n\r\n    public String showDeck() {\r\n        return null;\r\n\r\n    }\r\n\r\n    public String showCurrentUserInfo() {\r\n        return null;\r\n    }\r\n\r\n    public String saveDeckByFile(Matcher matcher) {\r\n        return null;\r\n    }\r\n    public String saveDeckByName(Matcher matcher) {\r\n        return null;\r\n    }\r\n\r\n    public String loadDeckByFile(Matcher matcher) {\r\n        return null;\r\n\r\n    }\r\n    public String loadDeckByName(Matcher matcher) {\r\n        return null;\r\n\r\n    }\r\n\r\n    public String showLeaders() {\r\n        return null;\r\n\r\n    }\r\n\r\n    public String selectLeader(Matcher matcher) {\r\n        return null;\r\n\r\n    }\r\n\r\n\r\n    public void addToDeck(Matcher matcher) {\r\n\r\n    }\r\n\r\n    public void deleteFromDeck(Matcher matcher) {\r\n    }\r\n\r\n    public String changeTurn() {\r\n        return null;\r\n    }\r\n\r\n    public String startGame() {\r\n        return null;\r\n\r\n    }\r\n\r\n    public void endGame() {\r\n        // Save game state and user data when the game ends\r\n        gameBattleField.saveGameState(\"src/main/resources/gameState.json\");\r\n        user.saveUserData(\"src/main/resources/userData.json\");\r\n    }\r\n\r\n    public void loadGame() {\r\n        // Load game state and user data when starting the game\r\n        gameBattleField = GameBattleField.loadGameState(\"src/main/resources/gameState.json\");\r\n        user = User.loadUserData(\"src/main/resources/userData.json\");\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Sample/Controller/GameController.java b/src/main/java/Sample/Controller/GameController.java
--- a/src/main/java/Sample/Controller/GameController.java	(revision f9bb180293b1f8ec200f5452f43070a0516a10ba)
+++ b/src/main/java/Sample/Controller/GameController.java	(date 1719693133241)
@@ -2,100 +2,38 @@
 
 import Sample.Model.GameBattleField;
 import Sample.Model.User;
+import Sample.View.LoginMenu;
+import javafx.animation.TranslateTransition;
+import javafx.fxml.FXML;
+import javafx.scene.image.Image;
+import javafx.scene.image.ImageView;
+import javafx.scene.layout.AnchorPane;
+import javafx.scene.layout.GridPane;
+import javafx.util.Duration;
 
-import java.util.regex.Matcher;
+import java.util.Objects;
 
 public class GameController {
+    @FXML
+    private AnchorPane pane;
+    @FXML
+    private GridPane myHandCards;
+    @FXML
+    private GridPane myCloseCombatCardsPlayed;
+    @FXML
+    private GridPane myRangedCombatCardsPlayed;
+    @FXML
+    private GridPane mySiegeCardsPlayed;
+    @FXML
+    private GridPane competitorCloseCombatCardsPlayed;
+    @FXML
+    private GridPane competitorRangedCombatCardsPlayed;
+    @FXML
+    private GridPane competitorSiegeCardsPlayed;
     private GameBattleField gameBattleField;
     private User user;
-    private static GameController controller;
-
-    public static GameController getInstance() {
-        if (controller == null) {
-            controller = new GameController();
-        }
-        return controller;
-    }
-
-    public String enterMenu() {
-        return null;
-    }
-
-    public String exitMenu() {
-        return null;
-    }
-
-    public String showCurrentMenu() {
-        return "GameMenu";
-    }
-
-    public String showFactions() {
-        return null;
-    }
-
-    public String createGame() {
-        return null;
-    }
-
-
-    public String selectFaction(Matcher matcher) {
-        return null;
-    }
-
-    public String showCards() {
-        return null;
-
-    }
-
-    public String showDeck() {
-        return null;
-
-    }
-
-    public String showCurrentUserInfo() {
-        return null;
-    }
-
-    public String saveDeckByFile(Matcher matcher) {
-        return null;
-    }
-    public String saveDeckByName(Matcher matcher) {
-        return null;
-    }
-
-    public String loadDeckByFile(Matcher matcher) {
-        return null;
-
-    }
-    public String loadDeckByName(Matcher matcher) {
-        return null;
 
-    }
-
-    public String showLeaders() {
-        return null;
-
-    }
-
-    public String selectLeader(Matcher matcher) {
-        return null;
-
-    }
-
-
-    public void addToDeck(Matcher matcher) {
-
-    }
-
-    public void deleteFromDeck(Matcher matcher) {
-    }
-
-    public String changeTurn() {
-        return null;
-    }
-
-    public String startGame() {
-        return null;
+    public void initialize() {
 
     }
 
